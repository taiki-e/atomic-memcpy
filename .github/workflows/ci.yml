name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
          component: rust-src
          # thumbv7m-none-eabi/riscv32imac-unknown-none-elf/riscv32imc-esp-espidf: supports atomic CAS
          # thumbv6m-none-eabi: supports atomic load/store, but not atomic CAS
          # riscv32i-unknown-none-elf/riscv32imc-unknown-none-elf: does not support atomic at all
          # msp430-none-elf: 16-bit, does not support atomic at all
          target: thumbv7m-none-eabi,thumbv6m-none-eabi,riscv32i-unknown-none-elf,riscv32imc-unknown-none-elf,riscv32imac-unknown-none-elf
      - uses: taiki-e/install-action@cargo-hack
      - run: cargo test --workspace -- --test-threads=1
      - run: cargo test --workspace --release -- --test-threads=1
      - run: cargo test --workspace --release --all-features --exclude asm-test --tests -- --test-threads=1
      # opt-level=0, opt-level=1, opt-level=s, opt-level=z fail to remove panic.
      - run: cargo test --workspace --release --all-features --exclude asm-test --tests -- --test-threads=1
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C opt-level=2
      - run: cargo test --workspace -- --test-threads=1
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg atomic_memcpy_unsafe_volatile
      - run: cargo test --workspace --release --all-features --exclude asm-test --tests -- --test-threads=1
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg atomic_memcpy_unsafe_volatile
      - run: cargo hack build --workspace --ignore-private --feature-powerset --optional-deps --no-dev-deps
      - run: cargo hack build --workspace --ignore-private --feature-powerset --optional-deps --no-dev-deps
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg atomic_memcpy_unsafe_volatile
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --target thumbv7m-none-eabi
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --release --target thumbv7m-none-eabi
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --target thumbv6m-none-eabi
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --release --target thumbv6m-none-eabi
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --target riscv32i-unknown-none-elf
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --release --target riscv32i-unknown-none-elf
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --target riscv32imc-unknown-none-elf
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --release --target riscv32imc-unknown-none-elf
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --target riscv32imac-unknown-none-elf
      - run: cargo build --manifest-path tests/no-std/Cargo.toml --release --target riscv32imac-unknown-none-elf
      - run: cargo -Z build-std=core build --manifest-path tests/no-std/Cargo.toml --target riscv32imc-esp-espidf
        if: startsWith(matrix.rust, 'nightly')
      - run: cargo -Z build-std=core build --manifest-path tests/no-std/Cargo.toml --release --target riscv32imc-esp-espidf
        if: startsWith(matrix.rust, 'nightly')
      - run: cargo -Z build-std=core build --manifest-path tests/no-std/Cargo.toml --target msp430-none-elf
        if: startsWith(matrix.rust, 'nightly')
      - run: cargo -Z build-std=core build --manifest-path tests/no-std/Cargo.toml --release --target msp430-none-elf
        if: startsWith(matrix.rust, 'nightly')

  cross:
    name: test (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
          - target: armv5te-unknown-linux-gnueabi
          - target: i686-unknown-linux-gnu
          - target: mips-unknown-linux-gnu
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - uses: taiki-e/install-action@cross
      - run: cross test --workspace --target ${{ matrix.target }} -- --test-threads=1
      - run: cross test --workspace --release --target ${{ matrix.target }} -- --test-threads=1
      - run: cross test --workspace --release --all-features --exclude asm-test --tests --target ${{ matrix.target }} -- --test-threads=1

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/install-action@cargo-hack
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range ..
        if: github.event_name != 'pull_request'
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range .. --version-step 2
        if: github.event_name == 'pull_request'
      # for no-panic
      - run: cargo hack test --no-run --workspace --release --all-features --ignore-private --version-range 1.54..

  # TODO
  # asm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #     - uses: taiki-e/github-actions/install-rust@main
  #     - run: cargo install --git https://github.com/taiki-e/cargo-asm.git --branch dev
  #     - run: cargo run --manifest-path tests/asm-test/Cargo.toml
  #     - run: git add -N . && git diff --exit-code

  miri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: miri
      - run: cargo miri test --workspace -- --test-threads=1
        env:
          MIRIFLAGS: -Zmiri-check-number-validity -Zmiri-tag-raw-pointers -Zmiri-disable-isolation
      - run: cargo miri test --workspace -- --test-threads=1
        env:
          MIRIFLAGS: -Zmiri-check-number-validity -Zmiri-symbolic-alignment-check -Zmiri-tag-raw-pointers -Zmiri-disable-isolation
          # -Zmiri-symbolic-alignment-check is incompatible with the code that does manual integer arithmetic to ensure alignment.
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg atomic_memcpy_symbolic_alignment_check_compat

  san:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - address
          - memory
          - thread
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: rust-src
      - run: |
          cargo -Z build-std test --workspace --target "$(rustc -Vv | grep host | sed 's/host: //')" --tests -- --test-threads=1
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z sanitizer=${{ matrix.sanitizer }}
      - run: |
          cargo -Z build-std test --workspace --release --target "$(rustc -Vv | grep host | sed 's/host: //')" --tests -- --test-threads=1
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z sanitizer=${{ matrix.sanitizer }}

  valgrind:
    env:
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - uses: taiki-e/install-action@valgrind
      - run: cargo test --workspace -- --test-threads=1
      - run: cargo test --workspace --release -- --test-threads=1

  cov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: llvm-tools-preview
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: cargo llvm-cov --workspace --text --hide-instantiations -- --test-threads=1
      - run: cargo llvm-cov --workspace --text --no-run

  codegen:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - run: tools/no_atomic.sh
      - run: git add -N . && git diff --exit-code
        if: github.repository_owner != 'taiki-e' || github.event_name != 'schedule' && !(github.event_name == 'push' && github.ref == 'refs/heads/main')
      - id: diff
        run: |
          git config user.name "Taiki Endo"
          git config user.email "te316e89@gmail.com"
          git add -N .
          if ! git diff --exit-code; then
              git add .
              git commit -m "Update tools/no_atomic"
              echo "::set-output name=success::false"
          fi
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - uses: taiki-e/create-pull-request@v3
        with:
          title: Update tools/no_atomic
          body: |
            Auto-generated by [create-pull-request][1]
            [Please close and immediately reopen this pull request to run CI.][2]

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/peter-evans/create-pull-request/blob/HEAD/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          branch: update-no-atomic-rs
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: clippy,rustfmt
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/install-action@shellcheck
      - run: cargo fmt --all --check
        if: always()
      - run: cargo clippy --workspace --all-targets
        if: always()
      - run: cargo minimal-versions build --workspace --ignore-private
        if: always()
      - run: shellcheck $(git ls-files '*.sh')
        if: always()

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - run: cargo doc --workspace --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

  # This job doesn't actually test anything, but they're used to tell bors the
  # build completed, as there is no practical way to detect when a workflow is
  # successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test
      - cross
      - msrv
      # - asm
      - miri
      - san
      - valgrind
      - cov
      - codegen
      - tidy
      - docs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
