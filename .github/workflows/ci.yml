name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: armv5te-unknown-linux-gnueabi
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: s390x-unknown-linux-gnu
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rust-src
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''
      - run: cargo test -v --workspace --exclude asm-test $DOCTEST_XCOMPILE
      - run: cargo test -v --workspace --exclude asm-test --release $DOCTEST_XCOMPILE
      - run: cargo test -v --workspace --exclude asm-test --release $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
      - run: cargo hack build -vv --workspace --ignore-private --feature-powerset --optional-deps --no-dev-deps
      - run: tools/build.sh
        if: matrix.target == ''
      - run: cargo minimal-versions build -vv --workspace --all-features --ignore-private
        if: startsWith(matrix.rust, 'nightly')

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/install-action@cargo-hack
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range ..
        if: github.event_name != 'pull_request'
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range .. --version-step 2
        if: github.event_name == 'pull_request'

  miri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@miri
      - run: cargo miri test --workspace --exclude asm-test
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check -Zmiri-retag-fields -Zmiri-disable-isolation
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout

  san:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - address
          - memory
          - thread
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      - run: |
          echo "ASAN_OPTIONS=detect_stack_use_after_return=1" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'address'
      - run: |
          echo "MSAN_OPTIONS=verbosity=2" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'memory'
      - run: |
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'thread'
      - run: |
          cargo -Z build-std test --workspace --exclude asm-test --target "$(rustc -Vv | grep host | sed 's/host: //')"
      - run: |
          cargo -Z build-std test --workspace --exclude asm-test --release --target "$(rustc -Vv | grep host | sed 's/host: //')"
      - run: |
          cargo -Z build-std test --workspace --exclude asm-test --release --target "$(rustc -Vv | grep host | sed 's/host: //')"
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat

  valgrind:
    env:
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      - uses: taiki-e/install-action@valgrind
      # -Z doctest-xcompile is needed to apply CARGO_TARGET_*_RUNNER to doctest.
      - run: cargo test -v --workspace --exclude asm-test -Z doctest-xcompile
      - run: cargo test -v --workspace --exclude asm-test --release -Z doctest-xcompile
      - run: cargo test -v --workspace --exclude asm-test --release -Z doctest-xcompile
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo doc --workspace --all-features --document-private-items

  check-external-types:
    env:
      CARGO_CHECK_EXTERNAL_TYPES_VERSION: 0.1.6
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly-2022-11-16
      - name: Pre Cache cargo-check-external-types
        run: |
          mkdir -p .github/caching
          echo "${CARGO_CHECK_EXTERNAL_TYPES_VERSION}" > .github/caching/cargo-check-external-types.lock
          echo "${{ runner.tool_cache }}/cargo-check-external-types/bin" >> "${GITHUB_PATH}"
      - name: Cache cargo-check-external-types
        id: cache-cargo-check-external-types
        uses: actions/cache@v3
        with:
          path: ${{ runner.tool_cache }}/cargo-check-external-types/bin
          key: cargo-check-external-types-bin-${{ hashFiles('.github/caching/cargo-check-external-types.lock') }}
      - name: Install cargo-check-external-types
        run: cargo install -f cargo-check-external-types --root ${{ runner.tool_cache }}/cargo-check-external-types --locked --version "${CARGO_CHECK_EXTERNAL_TYPES_VERSION}"
        if: steps.cache-cargo-check-external-types.outputs.cache-hit != 'true'
      - run: cargo check-external-types --all-features --config .external-types.toml

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-deny
      # Workaround for https://github.com/EmbarkStudios/cargo-deny/issues/413
      - run: cargo hack --remove-dev-deps --workspace
      - run: cargo deny check licenses advisories --config .deny.toml

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy,rustfmt
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - run: pip3 install yq
      - run: cargo fmt --all --check
        if: always()
      - run: cargo clippy --workspace --all-targets
        if: always()
      - run: tools/tidy.sh
        if: always()

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    # prettier-ignore
    needs: [test, msrv, miri, san, valgrind, docs, check-external-types, deny, tidy] # tidy:needs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
