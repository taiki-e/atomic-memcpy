asm_test::atomic_memcpy_store_align1::release:
 push    {r4, r5, r6, r7, r8, lr}
 sub     sp, sp, #64
 mov     r8, sp
 mov     r7, r0
 mov     r0, r8
 mov     r2, #32
 mov     r6, #32
 bl      memcpy
 mov     r0, #0
 add     r2, sp, #32
 mcr     p15, #0, r0, c7, c10, #5
 ldm     r8!, {r1, r3, r4, r5}
 mov     r0, r2
 stm     r0!, {r1, r3, r4, r5}
 ldm     r8, {r1, r3, r4, r5}
 stm     r0, {r1, r3, r4, r5}
 add     r0, r7, #3
 bic     r1, r0, #3
 sub     r0, r1, r7
 cmp     r0, #33
 blo     .LBB2_2
 ldrb    r0, [sp, #32]
 strb    r0, [r7]
 ldrb    r0, [sp, #33]
 strb    r0, [r7, #1]
 ldrb    r0, [sp, #34]
 strb    r0, [r7, #2]
 ldrb    r0, [sp, #35]
 strb    r0, [r7, #3]
 ldrb    r0, [sp, #36]
 strb    r0, [r7, #4]
 ldrb    r0, [sp, #37]
 strb    r0, [r7, #5]
 ldrb    r0, [sp, #38]
 strb    r0, [r7, #6]
 ldrb    r0, [sp, #39]
 strb    r0, [r7, #7]
 ldrb    r0, [sp, #40]
 strb    r0, [r7, #8]
 ldrb    r0, [sp, #41]
 strb    r0, [r7, #9]
 ldrb    r0, [sp, #42]
 strb    r0, [r7, #10]
 ldrb    r0, [sp, #43]
 strb    r0, [r7, #11]
 ldrb    r0, [sp, #44]
 strb    r0, [r7, #12]
 ldrb    r0, [sp, #45]
 strb    r0, [r7, #13]
 ldrb    r0, [sp, #46]
 strb    r0, [r7, #14]
 ldrb    r0, [sp, #47]
 strb    r0, [r7, #15]
 ldrb    r0, [sp, #48]
 strb    r0, [r7, #16]
 ldrb    r0, [sp, #49]
 strb    r0, [r7, #17]
 ldrb    r0, [sp, #50]
 strb    r0, [r7, #18]
 ldrb    r0, [sp, #51]
 strb    r0, [r7, #19]
 ldrb    r0, [sp, #52]
 strb    r0, [r7, #20]
 ldrb    r0, [sp, #53]
 strb    r0, [r7, #21]
 ldrb    r0, [sp, #54]
 strb    r0, [r7, #22]
 ldrb    r0, [sp, #55]
 strb    r0, [r7, #23]
 ldrb    r0, [sp, #56]
 strb    r0, [r7, #24]
 ldrb    r0, [sp, #57]
 strb    r0, [r7, #25]
 ldrb    r0, [sp, #58]
 strb    r0, [r7, #26]
 ldrb    r0, [sp, #59]
 strb    r0, [r7, #27]
 ldrb    r0, [sp, #60]
 strb    r0, [r7, #28]
 ldrb    r0, [sp, #61]
 strb    r0, [r7, #29]
 ldrb    r0, [sp, #62]
 strb    r0, [r7, #30]
 ldrb    r0, [sp, #63]
 strb    r0, [r7, #31]
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, pc}
.LBB2_2:
 cmp     r0, #0
 beq     .LBB2_6
 sub     r3, r7, r1
 mov     r4, r7
.LBB2_4:
 ldrb    r6, [r2], #1
 adds    r3, r3, #1
 strb    r6, [r4]
 add     r4, r4, #1
 blo     .LBB2_4
 sub     r2, r7, r1
 add     r6, r2, #32
 cmp     r6, #4
 blo     .LBB2_9
.LBB2_6:
 sub     r0, r7, r1
 add     r1, sp, #32
.LBB2_7:
 sub     r3, r1, r0
 ldrb    r2, [r1, -r0]
 sub     r6, r6, #4
 ldrb    r5, [r3, #1]
 cmp     r6, #3
 ldrb    r4, [r3, #2]
 ldrb    r3, [r3, #3]
 orr     r2, r2, r5, lsl, #8
 orr     r3, r4, r3, lsl, #8
 orr     r2, r2, r3, lsl, #16
 str     r2, [r7, -r0]
 sub     r0, r0, #4
 bhi     .LBB2_7
 rsb     r0, r0, #0
.LBB2_9:
 cmp     r6, #0
 beq     .LBB2_12
 add     r1, sp, #32
 add     r1, r1, r0
 add     r0, r7, r0
.LBB2_11:
 ldrb    r2, [r1], #1
 subs    r6, r6, #1
 strb    r2, [r0]
 add     r0, r0, #1
 bne     .LBB2_11
.LBB2_12:
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, pc}
.LBB4_2:
 ldr     r2, [r1]
 str     r2, [sp]
 ldr     r2, [r1, #4]
 str     r2, [sp, #4]
 ldr     r2, [r1, #8]
 str     r2, [sp, #8]
 ldr     r2, [r1, #12]
 str     r2, [sp, #12]
 ldr     r2, [r1, #16]
 str     r2, [sp, #16]
 ldr     r2, [r1, #20]
 str     r2, [sp, #20]
 ldr     r2, [r1, #24]
 str     r2, [sp, #24]
 ldr     r1, [r1, #28]
 str     r1, [sp, #28]
.LBB4_3:
 mov     r1, sp
 mov     r2, #32
 bl      memcpy
 mov     r0, #0
 mcr     p15, #0, r0, c7, c10, #5
 add     sp, sp, #32
 pop     {r11, pc}
.LBB6_2:
 ldr     r0, [sp, #32]
 str     r0, [r6]
 ldr     r0, [sp, #36]
 str     r0, [r6, #4]
 ldr     r0, [sp, #40]
 str     r0, [r6, #8]
 ldr     r0, [sp, #44]
 str     r0, [r6, #12]
 ldr     r0, [sp, #48]
 str     r0, [r6, #16]
 ldr     r0, [sp, #52]
 str     r0, [r6, #20]
 ldr     r0, [sp, #56]
 str     r0, [r6, #24]
 ldr     r0, [sp, #60]
 str     r0, [r6, #28]
 add     sp, sp, #64
 pop     {r4, r5, r6, pc}
asm_test::atomic_memcpy_store_align1::write_volatile_release_fence:
 push    {r4, r5, r11, lr}
 sub     sp, sp, #32
 mov     r4, r0
 mov     r0, #0
 mov     r5, sp
 mcr     p15, #0, r0, c7, c10, #5
 mov     r0, r5
 mov     r2, #32
 bl      memcpy
 mov     r0, r4
 mov     r1, r5
 mov     r2, #32
 bl      memcpy
 add     sp, sp, #32
 pop     {r4, r5, r11, pc}
.LBB4_2:
 ldr     r2, [r1]
 str     r2, [sp]
 ldr     r2, [r1, #4]
 str     r2, [sp, #4]
 ldr     r2, [r1, #8]
 str     r2, [sp, #8]
 ldr     r2, [r1, #12]
 str     r2, [sp, #12]
 ldr     r2, [r1, #16]
 str     r2, [sp, #16]
 ldr     r2, [r1, #20]
 str     r2, [sp, #20]
 ldr     r2, [r1, #24]
 str     r2, [sp, #24]
 ldr     r1, [r1, #28]
 str     r1, [sp, #28]
.LBB4_3:
 mov     r1, sp
 mov     r2, #32
 bl      memcpy
 mov     r0, #0
 mcr     p15, #0, r0, c7, c10, #5
 add     sp, sp, #32
 pop     {r11, pc}
.LBB6_2:
 ldr     r0, [sp, #32]
 str     r0, [r6]
 ldr     r0, [sp, #36]
 str     r0, [r6, #4]
 ldr     r0, [sp, #40]
 str     r0, [r6, #8]
 ldr     r0, [sp, #44]
 str     r0, [r6, #12]
 ldr     r0, [sp, #48]
 str     r0, [r6, #16]
 ldr     r0, [sp, #52]
 str     r0, [r6, #20]
 ldr     r0, [sp, #56]
 str     r0, [r6, #24]
 ldr     r0, [sp, #60]
 str     r0, [r6, #28]
 add     sp, sp, #64
 pop     {r4, r5, r6, pc}
