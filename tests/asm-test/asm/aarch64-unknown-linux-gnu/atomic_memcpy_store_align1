asm_test::atomic_memcpy_store_align1::release:
 ldp     q0, q1, [x1]
 add     x8, x0, #7
 and     x8, x8, #0xfffffffffffffff8
 ldp     q2, q3, [x1, #32]
 stp     q0, q1, [sp, #-128]!
 stp     q2, q3, [sp, #32]
 sub     x9, x8, x0
 dmb     ish
 cmp     x9, #65
 ldp     q0, q1, [sp]
 ldp     q2, q3, [sp, #32]
 stp     q0, q1, [sp, #64]
 stp     q2, q3, [sp, #96]
 b.hs    .LBB2_3
 cmp     x8, x0
 b.ne    .LBB2_4
 mov     x8, xzr
 mov     w9, #64
 b       .LBB2_7
.LBB2_3:
 ldrb    w8, [sp, #64]
 strb    w8, [x0]
 ldrb    w8, [sp, #65]
 strb    w8, [x0, #1]
 ldrb    w8, [sp, #66]
 strb    w8, [x0, #2]
 ldrb    w8, [sp, #67]
 strb    w8, [x0, #3]
 ldrb    w8, [sp, #68]
 strb    w8, [x0, #4]
 ldrb    w8, [sp, #69]
 strb    w8, [x0, #5]
 ldrb    w8, [sp, #70]
 strb    w8, [x0, #6]
 ldrb    w8, [sp, #71]
 strb    w8, [x0, #7]
 ldrb    w8, [sp, #72]
 strb    w8, [x0, #8]
 ldrb    w8, [sp, #73]
 strb    w8, [x0, #9]
 ldrb    w8, [sp, #74]
 strb    w8, [x0, #10]
 ldrb    w8, [sp, #75]
 strb    w8, [x0, #11]
 ldrb    w8, [sp, #76]
 strb    w8, [x0, #12]
 ldrb    w8, [sp, #77]
 strb    w8, [x0, #13]
 ldrb    w8, [sp, #78]
 strb    w8, [x0, #14]
 ldrb    w8, [sp, #79]
 strb    w8, [x0, #15]
 ldrb    w8, [sp, #80]
 strb    w8, [x0, #16]
 ldrb    w8, [sp, #81]
 strb    w8, [x0, #17]
 ldrb    w8, [sp, #82]
 strb    w8, [x0, #18]
 ldrb    w8, [sp, #83]
 strb    w8, [x0, #19]
 ldrb    w8, [sp, #84]
 strb    w8, [x0, #20]
 ldrb    w8, [sp, #85]
 strb    w8, [x0, #21]
 ldrb    w8, [sp, #86]
 strb    w8, [x0, #22]
 ldrb    w8, [sp, #87]
 strb    w8, [x0, #23]
 ldrb    w8, [sp, #88]
 strb    w8, [x0, #24]
 ldrb    w8, [sp, #89]
 strb    w8, [x0, #25]
 ldrb    w8, [sp, #90]
 strb    w8, [x0, #26]
 ldrb    w8, [sp, #91]
 strb    w8, [x0, #27]
 ldrb    w8, [sp, #92]
 strb    w8, [x0, #28]
 ldrb    w8, [sp, #93]
 strb    w8, [x0, #29]
 ldrb    w8, [sp, #94]
 strb    w8, [x0, #30]
 ldrb    w8, [sp, #95]
 strb    w8, [x0, #31]
 ldrb    w8, [sp, #96]
 strb    w8, [x0, #32]
 ldrb    w8, [sp, #97]
 strb    w8, [x0, #33]
 ldrb    w8, [sp, #98]
 strb    w8, [x0, #34]
 ldrb    w8, [sp, #99]
 strb    w8, [x0, #35]
 ldrb    w8, [sp, #100]
 strb    w8, [x0, #36]
 ldrb    w8, [sp, #101]
 strb    w8, [x0, #37]
 ldrb    w8, [sp, #102]
 strb    w8, [x0, #38]
 ldrb    w8, [sp, #103]
 strb    w8, [x0, #39]
 ldrb    w8, [sp, #104]
 strb    w8, [x0, #40]
 ldrb    w8, [sp, #105]
 strb    w8, [x0, #41]
 ldrb    w8, [sp, #106]
 strb    w8, [x0, #42]
 ldrb    w8, [sp, #107]
 strb    w8, [x0, #43]
 ldrb    w8, [sp, #108]
 strb    w8, [x0, #44]
 ldrb    w8, [sp, #109]
 strb    w8, [x0, #45]
 ldrb    w8, [sp, #110]
 strb    w8, [x0, #46]
 ldrb    w8, [sp, #111]
 strb    w8, [x0, #47]
 ldrb    w8, [sp, #112]
 strb    w8, [x0, #48]
 ldrb    w8, [sp, #113]
 strb    w8, [x0, #49]
 ldrb    w8, [sp, #114]
 strb    w8, [x0, #50]
 ldrb    w8, [sp, #115]
 strb    w8, [x0, #51]
 ldrb    w8, [sp, #116]
 strb    w8, [x0, #52]
 ldrb    w8, [sp, #117]
 strb    w8, [x0, #53]
 ldrb    w8, [sp, #118]
 strb    w8, [x0, #54]
 ldrb    w8, [sp, #119]
 strb    w8, [x0, #55]
 ldrb    w8, [sp, #120]
 strb    w8, [x0, #56]
 ldrb    w8, [sp, #121]
 strb    w8, [x0, #57]
 ldrb    w8, [sp, #122]
 strb    w8, [x0, #58]
 ldrb    w8, [sp, #123]
 strb    w8, [x0, #59]
 ldrb    w8, [sp, #124]
 strb    w8, [x0, #60]
 ldrb    w8, [sp, #125]
 strb    w8, [x0, #61]
 ldrb    w8, [sp, #126]
 strb    w8, [x0, #62]
 ldrb    w8, [sp, #127]
 strb    w8, [x0, #63]
 add     sp, sp, #128
 ret
.LBB2_4:
 cmp     x9, #1
 mov     x11, x0
 csinc   x8, x9, xzr, hi
 add     x9, sp, #64
 mov     x10, x8
.LBB2_5:
 ldrb    w12, [x9], #1
 subs    x10, x10, #1
 strb    w12, [x11], #1
 b.ne    .LBB2_5
 mov     w9, #64
 sub     x9, x9, x8
 cmp     x9, #7
 b.ls    .LBB2_9
.LBB2_7:
 add     x10, sp, #64
.LBB2_8:
 ldr     x11, [x10, x8]
 sub     x9, x9, #8
 cmp     x9, #7
 str     x11, [x0, x8]
 add     x8, x8, #8
 b.hi    .LBB2_8
.LBB2_9:
 cbz     x9, .LBB2_12
 add     x11, sp, #64
 add     x10, x0, x8
 add     x8, x11, x8
.LBB2_11:
 ldrb    w11, [x8], #1
 subs    x9, x9, #1
 strb    w11, [x10], #1
 b.ne    .LBB2_11
.LBB2_12:
 add     sp, sp, #128
 ret
asm_test::atomic_memcpy_store_align1::write_volatile_release_fence:
 sub     sp, sp, #64
 dmb     ish
 ldp     q0, q1, [x1, #32]
 ldp     q3, q2, [x1]
 stp     q0, q1, [sp, #32]
 stp     q3, q2, [sp]
 ldr     q0, [sp, #16]
 ldr     q1, [sp, #32]
 ldr     q2, [sp, #48]
 ldr     q3, [sp]
 str     q3, [x0]
 str     q2, [x0, #48]
 str     q1, [x0, #32]
 str     q0, [x0, #16]
 add     sp, sp, #64
 ret
