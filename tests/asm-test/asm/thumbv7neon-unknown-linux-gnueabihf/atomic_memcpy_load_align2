asm_test::atomic_memcpy_load_align2::acquire:
 push    {r7, lr}
 sub     sp, #32
 mov     lr, sp
 add.w   r3, lr, #30
 add.w   r12, r1, #30
 @APP
 ldrh.w  r2, [r12]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #28
 add.w   r3, lr, #28
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r12, lr, #16
 add.w   r2, r1, #26
 add.w   r3, lr, #26
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #24
 add.w   r3, lr, #24
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #22
 add.w   r3, lr, #22
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #20
 add.w   r3, lr, #20
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #18
 add.w   r3, lr, #18
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #16
 mov     r3, r12
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #14
 add.w   r3, lr, #14
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #12
 add.w   r3, lr, #12
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #10
 add.w   r3, lr, #10
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 add.w   r2, r1, #8
 add.w   r3, lr, #8
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 adds    r2, r1, #6
 add.w   r3, lr, #6
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 adds    r2, r1, #4
 add.w   r3, lr, #4
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 adds    r2, r1, #2
 add.w   r3, lr, #2
 @APP
 ldrh    r2, [r2]
 strh    r2, [r3]
 @NO_APP
 mov     r2, lr
 @APP
 ldrh    r1, [r1]
 strh    r1, [r2]
 @NO_APP
 vld1.64 {d16, d17}, [lr]
 vld1.64 {d18, d19}, [r12]
 vst1.16 {d16, d17}, [r0]!
 vst1.16 {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r7, pc}
asm_test::atomic_memcpy_load_align2::read_volatile_acquire_fence:
 push    {r4, r5, r7, lr}
 ldrh    r2, [r1, #28]
 ldrh    r3, [r1, #26]
 ldrh.w  r12, [r1, #24]
 ldrh.w  lr, [r1, #22]
 ldrh    r4, [r1, #20]
 ldrh    r5, [r1, #30]
 strh    r5, [r0, #30]
 ldrh    r5, [r1, #18]
 strh    r2, [r0, #28]
 ldrh    r2, [r1, #16]
 strh    r3, [r0, #26]
 ldrh    r3, [r1, #14]
 strh.w  r12, [r0, #24]
 ldrh.w  r12, [r1, #10]
 strh.w  lr, [r0, #22]
 ldrh.w  lr, [r1, #8]
 strh    r4, [r0, #20]
 ldrh    r4, [r1, #6]
 strh    r5, [r0, #18]
 ldrh    r5, [r1, #4]
 strh    r2, [r0, #16]
 ldrh    r2, [r1, #2]
 strh    r3, [r0, #14]
 ldrh    r3, [r1]
 ldrh    r1, [r1, #12]
 strh    r1, [r0, #12]
 strh.w  r12, [r0, #10]
 strh.w  lr, [r0, #8]
 strh    r4, [r0, #6]
 strh    r5, [r0, #4]
 strh    r2, [r0, #2]
 strh    r3, [r0]
 dmb     ish
 pop     {r4, r5, r7, pc}
