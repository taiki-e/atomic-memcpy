asm_test::atomic_memcpy_store_align1::release:
 push    {r4, lr}
 sub     sp, #64
 vld1.8  {d16, d17}, [r1]!
 add.w   lr, sp, #32
 vld1.8  {d18, d19}, [r1]
 mov     r1, sp
 mov     r2, r1
 vst1.64 {d16, d17}, [r2]!
 vst1.64 {d18, d19}, [r2]
 dmb     ish
 vld1.64 {d16, d17}, [r1]
 mov     r1, lr
 vld1.64 {d18, d19}, [r2]
 vst1.64 {d16, d17}, [r1]!
 vst1.64 {d18, d19}, [r1]
 adds    r1, r0, #3
 bic     r1, r1, #3
 sub.w   r12, r1, r0
 cmp.w   r12, #33
 bhs     .LBB2_3
 cmp     r1, r0
 bne     .LBB2_4
 movs    r3, #32
 mov.w   r12, #0
 b       .LBB2_7
.LBB2_3:
 ldrb.w  r1, [sp, #32]
 strb    r1, [r0]
 ldrb.w  r1, [sp, #33]
 strb    r1, [r0, #1]
 ldrb.w  r1, [sp, #34]
 strb    r1, [r0, #2]
 ldrb.w  r1, [sp, #35]
 strb    r1, [r0, #3]
 ldrb.w  r1, [sp, #36]
 strb    r1, [r0, #4]
 ldrb.w  r1, [sp, #37]
 strb    r1, [r0, #5]
 ldrb.w  r1, [sp, #38]
 strb    r1, [r0, #6]
 ldrb.w  r1, [sp, #39]
 strb    r1, [r0, #7]
 ldrb.w  r1, [sp, #40]
 strb    r1, [r0, #8]
 ldrb.w  r1, [sp, #41]
 strb    r1, [r0, #9]
 ldrb.w  r1, [sp, #42]
 strb    r1, [r0, #10]
 ldrb.w  r1, [sp, #43]
 strb    r1, [r0, #11]
 ldrb.w  r1, [sp, #44]
 strb    r1, [r0, #12]
 ldrb.w  r1, [sp, #45]
 strb    r1, [r0, #13]
 ldrb.w  r1, [sp, #46]
 strb    r1, [r0, #14]
 ldrb.w  r1, [sp, #47]
 strb    r1, [r0, #15]
 ldrb.w  r1, [sp, #48]
 strb    r1, [r0, #16]
 ldrb.w  r1, [sp, #49]
 strb    r1, [r0, #17]
 ldrb.w  r1, [sp, #50]
 strb    r1, [r0, #18]
 ldrb.w  r1, [sp, #51]
 strb    r1, [r0, #19]
 ldrb.w  r1, [sp, #52]
 strb    r1, [r0, #20]
 ldrb.w  r1, [sp, #53]
 strb    r1, [r0, #21]
 ldrb.w  r1, [sp, #54]
 strb    r1, [r0, #22]
 ldrb.w  r1, [sp, #55]
 strb    r1, [r0, #23]
 ldrb.w  r1, [sp, #56]
 strb    r1, [r0, #24]
 ldrb.w  r1, [sp, #57]
 strb    r1, [r0, #25]
 ldrb.w  r1, [sp, #58]
 strb    r1, [r0, #26]
 ldrb.w  r1, [sp, #59]
 strb    r1, [r0, #27]
 ldrb.w  r1, [sp, #60]
 strb    r1, [r0, #28]
 ldrb.w  r1, [sp, #61]
 strb    r1, [r0, #29]
 ldrb.w  r1, [sp, #62]
 strb    r1, [r0, #30]
 ldrb.w  r1, [sp, #63]
 strb    r1, [r0, #31]
 b       .LBB2_11
.LBB2_4:
 add     r3, sp, #32
 cmp.w   r12, #1
 it      ls
 movls.w r12, #1
 mov     r2, r12
 mov     r1, r0
.LBB2_5:
 ldrb    r4, [r3], #1
 subs    r2, #1
 strb    r4, [r1], #1
 bne     .LBB2_5
 rsb.w   r3, r12, #32
 cmp     r3, #4
 blo     .LBB2_8
.LBB2_7:
 ldr.w   r1, [lr, r12]
 subs    r3, #4
 cmp     r3, #3
 str.w   r1, [r0, r12]
 add.w   r12, r12, #4
 bhi     .LBB2_7
.LBB2_8:
 cbz     r3, .LBB2_11
 add.w   r1, lr, r12
 add     r0, r12
.LBB2_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB2_10
.LBB2_11:
 add     sp, #64
 pop     {r4, pc}
.LBB4_3:
 ldrh    r2, [r1, #30]
 strh.w  r2, [sp, #30]
 ldrh    r2, [r1, #28]
 strh.w  r2, [sp, #28]
 ldrh    r2, [r1, #26]
 strh.w  r2, [sp, #26]
 ldrh    r2, [r1, #24]
 strh.w  r2, [sp, #24]
 ldrh    r2, [r1, #22]
 strh.w  r2, [sp, #22]
 ldrh    r2, [r1, #20]
 strh.w  r2, [sp, #20]
 ldrh    r2, [r1, #18]
 strh.w  r2, [sp, #18]
 ldrh    r2, [r1, #16]
 strh.w  r2, [sp, #16]
 ldrh    r2, [r1, #14]
 strh.w  r2, [sp, #14]
 ldrh    r2, [r1, #12]
 strh.w  r2, [sp, #12]
 ldrh    r2, [r1, #10]
 strh.w  r2, [sp, #10]
 ldrh    r2, [r1, #8]
 strh.w  r2, [sp, #8]
 ldrh    r2, [r1, #6]
 strh.w  r2, [sp, #6]
 ldrh    r2, [r1, #4]
 strh.w  r2, [sp, #4]
 ldrh    r2, [r1, #2]
 strh.w  r2, [sp, #2]
 ldrh    r1, [r1]
 strh.w  r1, [sp]
 b       .LBB4_12
.LBB4_4:
 cmp.w   r12, #1
 it      ls
 movls.w r12, #1
 mov     lr, sp
 mov     r2, r12
 mov     r3, r1
.LBB4_5:
 ldrb    r4, [r3], #1
 subs    r2, #1
 strb    r4, [lr], #1
 bne     .LBB4_5
 rsb.w   r3, r12, #32
 cmp     r3, #4
 blo     .LBB4_9
.LBB4_7:
 mov     r2, sp
.LBB4_8:
 ldr.w   r4, [r1, r12]
 subs    r3, #4
 cmp     r3, #3
 str.w   r4, [r2, r12]
 add.w   r12, r12, #4
 bhi     .LBB4_8
.LBB4_9:
 cbz     r3, .LBB4_12
 mov     r2, sp
 add     r1, r12
 add     r2, r12
.LBB4_11:
 ldrb    r4, [r1], #1
 subs    r3, #1
 strb    r4, [r2], #1
 bne     .LBB4_11
.LBB4_12:
 mov     r1, sp
 vld1.16 {d16, d17}, [r1]!
 vld1.64 {d18, d19}, [r1]
 vst1.16 {d16, d17}, [r0]!
 vst1.16 {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r4, pc}
.LBB6_3:
 ldrh.w  r1, [sp, #62]
 strh    r1, [r0, #30]
 ldrh.w  r1, [sp, #60]
 strh    r1, [r0, #28]
 ldrh.w  r1, [sp, #58]
 strh    r1, [r0, #26]
 ldrh.w  r1, [sp, #56]
 strh    r1, [r0, #24]
 ldrh.w  r1, [sp, #54]
 strh    r1, [r0, #22]
 ldrh.w  r1, [sp, #52]
 strh    r1, [r0, #20]
 ldrh.w  r1, [sp, #50]
 strh    r1, [r0, #18]
 ldrh.w  r1, [sp, #48]
 strh    r1, [r0, #16]
 ldrh.w  r1, [sp, #46]
 strh    r1, [r0, #14]
 ldrh.w  r1, [sp, #44]
 strh    r1, [r0, #12]
 ldrh.w  r1, [sp, #42]
 strh    r1, [r0, #10]
 ldrh.w  r1, [sp, #40]
 strh    r1, [r0, #8]
 ldrh.w  r1, [sp, #38]
 strh    r1, [r0, #6]
 ldrh.w  r1, [sp, #36]
 strh    r1, [r0, #4]
 ldrh.w  r1, [sp, #34]
 strh    r1, [r0, #2]
 ldrh.w  r1, [sp, #32]
 strh    r1, [r0]
 b       .LBB6_11
.LBB6_4:
 add     r3, sp, #32
 cmp.w   r12, #1
 it      ls
 movls.w r12, #1
 mov     r2, r12
 mov     r1, r0
.LBB6_5:
 ldrb    r4, [r3], #1
 subs    r2, #1
 strb    r4, [r1], #1
 bne     .LBB6_5
 rsb.w   r3, r12, #32
 cmp     r3, #4
 blo     .LBB6_8
.LBB6_7:
 ldr.w   r1, [lr, r12]
 subs    r3, #4
 cmp     r3, #3
 str.w   r1, [r0, r12]
 add.w   r12, r12, #4
 bhi     .LBB6_7
.LBB6_8:
 cbz     r3, .LBB6_11
 add.w   r1, lr, r12
 add     r0, r12
.LBB6_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB6_10
.LBB6_11:
 add     sp, #64
 pop     {r4, pc}
asm_test::atomic_memcpy_store_align1::write_volatile_release_fence:
 sub     sp, #32
 dmb     ish
 vld1.8  {d16, d17}, [r1]!
 vld1.8  {d18, d19}, [r1]
 mov     r1, sp
 vst1.64 {d16, d17}, [r1]
 vld1.64 {d16, d17}, [r1]!
 vst1.64 {d18, d19}, [r1]
 vst1.8  {d16, d17}, [r0]
 adds    r0, #16
 vld1.64 {d16, d17}, [r1]
 vst1.8  {d16, d17}, [r0]
 add     sp, #32
 bx      lr
.LBB4_3:
 ldrh    r2, [r1, #30]
 strh.w  r2, [sp, #30]
 ldrh    r2, [r1, #28]
 strh.w  r2, [sp, #28]
 ldrh    r2, [r1, #26]
 strh.w  r2, [sp, #26]
 ldrh    r2, [r1, #24]
 strh.w  r2, [sp, #24]
 ldrh    r2, [r1, #22]
 strh.w  r2, [sp, #22]
 ldrh    r2, [r1, #20]
 strh.w  r2, [sp, #20]
 ldrh    r2, [r1, #18]
 strh.w  r2, [sp, #18]
 ldrh    r2, [r1, #16]
 strh.w  r2, [sp, #16]
 ldrh    r2, [r1, #14]
 strh.w  r2, [sp, #14]
 ldrh    r2, [r1, #12]
 strh.w  r2, [sp, #12]
 ldrh    r2, [r1, #10]
 strh.w  r2, [sp, #10]
 ldrh    r2, [r1, #8]
 strh.w  r2, [sp, #8]
 ldrh    r2, [r1, #6]
 strh.w  r2, [sp, #6]
 ldrh    r2, [r1, #4]
 strh.w  r2, [sp, #4]
 ldrh    r2, [r1, #2]
 strh.w  r2, [sp, #2]
 ldrh    r1, [r1]
 strh.w  r1, [sp]
 b       .LBB4_12
.LBB4_4:
 cmp.w   r12, #1
 it      ls
 movls.w r12, #1
 mov     lr, sp
 mov     r2, r12
 mov     r3, r1
.LBB4_5:
 ldrb    r4, [r3], #1
 subs    r2, #1
 strb    r4, [lr], #1
 bne     .LBB4_5
 rsb.w   r3, r12, #32
 cmp     r3, #4
 blo     .LBB4_9
.LBB4_7:
 mov     r2, sp
.LBB4_8:
 ldr.w   r4, [r1, r12]
 subs    r3, #4
 cmp     r3, #3
 str.w   r4, [r2, r12]
 add.w   r12, r12, #4
 bhi     .LBB4_8
.LBB4_9:
 cbz     r3, .LBB4_12
 mov     r2, sp
 add     r1, r12
 add     r2, r12
.LBB4_11:
 ldrb    r4, [r1], #1
 subs    r3, #1
 strb    r4, [r2], #1
 bne     .LBB4_11
.LBB4_12:
 mov     r1, sp
 vld1.16 {d16, d17}, [r1]!
 vld1.64 {d18, d19}, [r1]
 vst1.16 {d16, d17}, [r0]!
 vst1.16 {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r4, pc}
.LBB6_3:
 ldrh.w  r1, [sp, #62]
 strh    r1, [r0, #30]
 ldrh.w  r1, [sp, #60]
 strh    r1, [r0, #28]
 ldrh.w  r1, [sp, #58]
 strh    r1, [r0, #26]
 ldrh.w  r1, [sp, #56]
 strh    r1, [r0, #24]
 ldrh.w  r1, [sp, #54]
 strh    r1, [r0, #22]
 ldrh.w  r1, [sp, #52]
 strh    r1, [r0, #20]
 ldrh.w  r1, [sp, #50]
 strh    r1, [r0, #18]
 ldrh.w  r1, [sp, #48]
 strh    r1, [r0, #16]
 ldrh.w  r1, [sp, #46]
 strh    r1, [r0, #14]
 ldrh.w  r1, [sp, #44]
 strh    r1, [r0, #12]
 ldrh.w  r1, [sp, #42]
 strh    r1, [r0, #10]
 ldrh.w  r1, [sp, #40]
 strh    r1, [r0, #8]
 ldrh.w  r1, [sp, #38]
 strh    r1, [r0, #6]
 ldrh.w  r1, [sp, #36]
 strh    r1, [r0, #4]
 ldrh.w  r1, [sp, #34]
 strh    r1, [r0, #2]
 ldrh.w  r1, [sp, #32]
 strh    r1, [r0]
 b       .LBB6_11
.LBB6_4:
 add     r3, sp, #32
 cmp.w   r12, #1
 it      ls
 movls.w r12, #1
 mov     r2, r12
 mov     r1, r0
.LBB6_5:
 ldrb    r4, [r3], #1
 subs    r2, #1
 strb    r4, [r1], #1
 bne     .LBB6_5
 rsb.w   r3, r12, #32
 cmp     r3, #4
 blo     .LBB6_8
.LBB6_7:
 ldr.w   r1, [lr, r12]
 subs    r3, #4
 cmp     r3, #3
 str.w   r1, [r0, r12]
 add.w   r12, r12, #4
 bhi     .LBB6_7
.LBB6_8:
 cbz     r3, .LBB6_11
 add.w   r1, lr, r12
 add     r0, r12
.LBB6_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB6_10
.LBB6_11:
 add     sp, #64
 pop     {r4, pc}
