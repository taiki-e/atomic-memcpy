asm_test::atomic_memcpy_load_align1::acquire:
 push    {r4, r5, r7, lr}
 sub     sp, #32
 adds    r2, r1, #3
 bic     r2, r2, #3
 sub.w   lr, r2, r1
 cmp.w   lr, #33
 blo     .LBB0_2
 ldrb    r2, [r1]
 mov     r3, sp
 strb.w  r2, [sp]
 add.w   r4, r3, #16
 ldrb    r2, [r1, #1]
 strb.w  r2, [sp, #1]
 ldrb    r2, [r1, #2]
 strb.w  r2, [sp, #2]
 ldrb    r2, [r1, #3]
 strb.w  r2, [sp, #3]
 ldrb    r2, [r1, #4]
 strb.w  r2, [sp, #4]
 ldrb    r2, [r1, #5]
 strb.w  r2, [sp, #5]
 ldrb    r2, [r1, #6]
 strb.w  r2, [sp, #6]
 ldrb    r2, [r1, #7]
 strb.w  r2, [sp, #7]
 ldrb    r2, [r1, #8]
 strb.w  r2, [sp, #8]
 ldrb    r2, [r1, #9]
 strb.w  r2, [sp, #9]
 ldrb    r2, [r1, #10]
 strb.w  r2, [sp, #10]
 ldrb    r2, [r1, #11]
 strb.w  r2, [sp, #11]
 ldrb    r2, [r1, #12]
 strb.w  r2, [sp, #12]
 ldrb    r2, [r1, #13]
 strb.w  r2, [sp, #13]
 ldrb    r2, [r1, #14]
 strb.w  r2, [sp, #14]
 ldrb    r2, [r1, #15]
 strb.w  r2, [sp, #15]
 ldrb    r2, [r1, #16]
 strb.w  r2, [sp, #16]
 ldrb    r2, [r1, #17]
 strb.w  r2, [sp, #17]
 ldrb    r2, [r1, #18]
 strb.w  r2, [sp, #18]
 ldrb    r2, [r1, #19]
 strb.w  r2, [sp, #19]
 ldrb    r2, [r1, #20]
 strb.w  r2, [sp, #20]
 ldrb    r2, [r1, #21]
 strb.w  r2, [sp, #21]
 ldrb    r2, [r1, #22]
 strb.w  r2, [sp, #22]
 ldrb    r2, [r1, #23]
 strb.w  r2, [sp, #23]
 ldrb    r2, [r1, #24]
 strb.w  r2, [sp, #24]
 ldrb    r2, [r1, #25]
 strb.w  r2, [sp, #25]
 ldrb    r2, [r1, #26]
 strb.w  r2, [sp, #26]
 ldrb    r2, [r1, #27]
 strb.w  r2, [sp, #27]
 ldrb    r2, [r1, #28]
 strb.w  r2, [sp, #28]
 ldrb    r2, [r1, #29]
 strb.w  r2, [sp, #29]
 ldrb    r2, [r1, #30]
 strb.w  r2, [sp, #30]
 movs    r2, #31
 ldrb    r1, [r1, #31]
 vld1.8  {d16, d17}, [r3], r2
 strb    r1, [r3]
 vld1.64 {d18, d19}, [r4]
 b       .LBB0_13
.LBB0_2:
 cmp.w   lr, #0
 beq     .LBB0_6
 sub.w   r12, r1, r2
 mov     r3, sp
 mov     r4, r1
 mov     r2, r12
.LBB0_4:
 ldrb    r5, [r4], #1
 adds    r2, #1
 strb    r5, [r3], #1
 blo     .LBB0_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB0_7
 b       .LBB0_9
.LBB0_6:
 movs    r3, #32
.LBB0_7:
 mov     r2, sp
.LBB0_8:
 ldr.w   r5, [r1, lr]
 subs    r3, #4
 cmp     r3, #3
 str.w   r5, [r2, lr]
 add.w   lr, lr, #4
 bhi     .LBB0_8
.LBB0_9:
 cbz     r3, .LBB0_12
 mov     r2, sp
 add     r1, lr
 add     r2, lr
.LBB0_11:
 ldrb    r5, [r1], #1
 subs    r3, #1
 strb    r5, [r2], #1
 bne     .LBB0_11
.LBB0_12:
 mov     r1, sp
 vld1.8  {d16, d17}, [r1]!
 vld1.64 {d18, d19}, [r1]
.LBB0_13:
 vst1.8  {d16, d17}, [r0]!
 vst1.8  {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r4, r5, r7, pc}
.LBB2_2:
 cbz     r2, .LBB2_6
 sub.w   r12, r0, r1
 add     r3, sp, #32
 mov     r4, r0
 mov     r1, r12
.LBB2_4:
 ldrb    r5, [r3], #1
 adds    r1, #1
 strb    r5, [r4], #1
 blo     .LBB2_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB2_7
 b       .LBB2_8
.LBB2_6:
 movs    r3, #32
.LBB2_7:
 ldr.w   r1, [lr, r2]
 subs    r3, #4
 cmp     r3, #3
 str     r1, [r0, r2]
 add.w   r2, r2, #4
 bhi     .LBB2_7
.LBB2_8:
 cbz     r3, .LBB2_11
 add.w   r1, lr, r2
 add     r0, r2
.LBB2_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB2_10
.LBB2_11:
 add     sp, #64
 pop     {r4, r5, r7, pc}
.LBB4_2:
 cmp.w   lr, #0
 beq     .LBB4_6
 sub.w   r12, r1, r2
 mov     r3, sp
 mov     r4, r1
 mov     r2, r12
.LBB4_4:
 ldrb    r5, [r4], #1
 adds    r2, #1
 strb    r5, [r3], #1
 blo     .LBB4_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB4_7
 b       .LBB4_9
.LBB4_6:
 movs    r3, #32
.LBB4_7:
 mov     r2, sp
.LBB4_8:
 ldr.w   r5, [r1, lr]
 subs    r3, #4
 cmp     r3, #3
 str.w   r5, [r2, lr]
 add.w   lr, lr, #4
 bhi     .LBB4_8
.LBB4_9:
 cbz     r3, .LBB4_12
 mov     r2, sp
 add     r1, lr
 add     r2, lr
.LBB4_11:
 ldrb    r5, [r1], #1
 subs    r3, #1
 strb    r5, [r2], #1
 bne     .LBB4_11
.LBB4_12:
 mov     r1, sp
 vld1.16 {d16, d17}, [r1]!
 vld1.64 {d18, d19}, [r1]
 vst1.16 {d16, d17}, [r0]!
 vst1.16 {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r4, r5, r7, pc}
.LBB6_2:
 cbz     r2, .LBB6_6
 sub.w   r12, r0, r1
 add     r3, sp, #32
 mov     r4, r0
 mov     r1, r12
.LBB6_4:
 ldrb    r5, [r3], #1
 adds    r1, #1
 strb    r5, [r4], #1
 blo     .LBB6_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB6_7
 b       .LBB6_8
.LBB6_6:
 movs    r3, #32
.LBB6_7:
 ldr.w   r1, [lr, r2]
 subs    r3, #4
 cmp     r3, #3
 str     r1, [r0, r2]
 add.w   r2, r2, #4
 bhi     .LBB6_7
.LBB6_8:
 cbz     r3, .LBB6_11
 add.w   r1, lr, r2
 add     r0, r2
.LBB6_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB6_10
.LBB6_11:
 add     sp, #64
 pop     {r4, r5, r7, pc}
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push.w  {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 sub     sp, #76
 ldrb    r2, [r1]
 str     r2, [sp, #72]
 ldrb    r2, [r1, #1]
 str     r2, [sp, #68]
 ldrb    r2, [r1, #2]
 str     r2, [sp, #64]
 ldrb    r2, [r1, #3]
 str     r2, [sp, #60]
 ldrb    r2, [r1, #4]
 str     r2, [sp, #56]
 ldrb    r2, [r1, #5]
 str     r2, [sp, #52]
 ldrb    r2, [r1, #6]
 str     r2, [sp, #48]
 ldrb    r2, [r1, #7]
 str     r2, [sp, #44]
 ldrb    r2, [r1, #8]
 str     r2, [sp, #40]
 ldrb    r2, [r1, #9]
 str     r2, [sp, #36]
 ldrb    r2, [r1, #10]
 str     r2, [sp, #32]
 ldrb    r2, [r1, #11]
 str     r2, [sp, #28]
 ldrb    r2, [r1, #12]
 str     r2, [sp, #24]
 ldrb    r2, [r1, #13]
 str     r2, [sp, #20]
 ldrb    r2, [r1, #14]
 str     r2, [sp, #16]
 ldrb    r2, [r1, #15]
 str     r2, [sp, #12]
 ldrb    r2, [r1, #16]
 str     r2, [sp, #8]
 ldrb    r2, [r1, #17]
 str     r2, [sp, #4]
 ldrb    r2, [r1, #18]
 str     r2, [sp]
 ldrb.w  r11, [r1, #19]
 ldrb.w  r10, [r1, #20]
 ldrb.w  r9, [r1, #21]
 ldrb.w  r8, [r1, #22]
 ldrb    r7, [r1, #23]
 ldrb    r6, [r1, #24]
 ldrb    r5, [r1, #25]
 ldrb    r4, [r1, #26]
 ldrb.w  lr, [r1, #27]
 ldrb.w  r12, [r1, #28]
 ldrb    r3, [r1, #29]
 ldrb    r2, [r1, #30]
 ldrb    r1, [r1, #31]
 strb    r1, [r0, #31]
 ldr     r1, [sp]
 strb    r1, [r0, #18]
 ldr     r1, [sp, #4]
 strb    r1, [r0, #17]
 ldr     r1, [sp, #8]
 strb    r1, [r0, #16]
 ldr     r1, [sp, #12]
 strb    r1, [r0, #15]
 ldr     r1, [sp, #16]
 strb    r1, [r0, #14]
 ldr     r1, [sp, #20]
 strb    r1, [r0, #13]
 ldr     r1, [sp, #24]
 strb    r1, [r0, #12]
 ldr     r1, [sp, #28]
 strb    r1, [r0, #11]
 ldr     r1, [sp, #32]
 strb    r1, [r0, #10]
 ldr     r1, [sp, #36]
 strb    r1, [r0, #9]
 ldr     r1, [sp, #40]
 strb    r1, [r0, #8]
 ldr     r1, [sp, #44]
 strb    r1, [r0, #7]
 ldr     r1, [sp, #48]
 strb    r1, [r0, #6]
 ldr     r1, [sp, #52]
 strb    r1, [r0, #5]
 ldr     r1, [sp, #56]
 strb    r1, [r0, #4]
 ldr     r1, [sp, #60]
 strb    r1, [r0, #3]
 ldr     r1, [sp, #64]
 strb    r1, [r0, #2]
 ldr     r1, [sp, #68]
 strb    r1, [r0, #1]
 ldr     r1, [sp, #72]
 strb    r2, [r0, #30]
 strb    r3, [r0, #29]
 strb.w  r12, [r0, #28]
 strb.w  lr, [r0, #27]
 strb    r4, [r0, #26]
 strb    r5, [r0, #25]
 strb    r6, [r0, #24]
 strb    r7, [r0, #23]
 strb.w  r8, [r0, #22]
 strb.w  r9, [r0, #21]
 strb.w  r10, [r0, #20]
 strb.w  r11, [r0, #19]
 strb    r1, [r0]
 dmb     ish
 add     sp, #76
 pop.w   {r4, r5, r6, r7, r8, r9, r10, r11, pc}
.LBB2_2:
 cbz     r2, .LBB2_6
 sub.w   r12, r0, r1
 add     r3, sp, #32
 mov     r4, r0
 mov     r1, r12
.LBB2_4:
 ldrb    r5, [r3], #1
 adds    r1, #1
 strb    r5, [r4], #1
 blo     .LBB2_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB2_7
 b       .LBB2_8
.LBB2_6:
 movs    r3, #32
.LBB2_7:
 ldr.w   r1, [lr, r2]
 subs    r3, #4
 cmp     r3, #3
 str     r1, [r0, r2]
 add.w   r2, r2, #4
 bhi     .LBB2_7
.LBB2_8:
 cbz     r3, .LBB2_11
 add.w   r1, lr, r2
 add     r0, r2
.LBB2_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB2_10
.LBB2_11:
 add     sp, #64
 pop     {r4, r5, r7, pc}
.LBB4_2:
 cmp.w   lr, #0
 beq     .LBB4_6
 sub.w   r12, r1, r2
 mov     r3, sp
 mov     r4, r1
 mov     r2, r12
.LBB4_4:
 ldrb    r5, [r4], #1
 adds    r2, #1
 strb    r5, [r3], #1
 blo     .LBB4_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB4_7
 b       .LBB4_9
.LBB4_6:
 movs    r3, #32
.LBB4_7:
 mov     r2, sp
.LBB4_8:
 ldr.w   r5, [r1, lr]
 subs    r3, #4
 cmp     r3, #3
 str.w   r5, [r2, lr]
 add.w   lr, lr, #4
 bhi     .LBB4_8
.LBB4_9:
 cbz     r3, .LBB4_12
 mov     r2, sp
 add     r1, lr
 add     r2, lr
.LBB4_11:
 ldrb    r5, [r1], #1
 subs    r3, #1
 strb    r5, [r2], #1
 bne     .LBB4_11
.LBB4_12:
 mov     r1, sp
 vld1.16 {d16, d17}, [r1]!
 vld1.64 {d18, d19}, [r1]
 vst1.16 {d16, d17}, [r0]!
 vst1.16 {d18, d19}, [r0]
 dmb     ish
 add     sp, #32
 pop     {r4, r5, r7, pc}
.LBB6_2:
 cbz     r2, .LBB6_6
 sub.w   r12, r0, r1
 add     r3, sp, #32
 mov     r4, r0
 mov     r1, r12
.LBB6_4:
 ldrb    r5, [r3], #1
 adds    r1, #1
 strb    r5, [r4], #1
 blo     .LBB6_4
 add.w   r3, r12, #32
 cmp     r3, #4
 bhs     .LBB6_7
 b       .LBB6_8
.LBB6_6:
 movs    r3, #32
.LBB6_7:
 ldr.w   r1, [lr, r2]
 subs    r3, #4
 cmp     r3, #3
 str     r1, [r0, r2]
 add.w   r2, r2, #4
 bhi     .LBB6_7
.LBB6_8:
 cbz     r3, .LBB6_11
 add.w   r1, lr, r2
 add     r0, r2
.LBB6_10:
 ldrb    r2, [r1], #1
 subs    r3, #1
 strb    r2, [r0], #1
 bne     .LBB6_10
.LBB6_11:
 add     sp, #64
 pop     {r4, r5, r7, pc}
