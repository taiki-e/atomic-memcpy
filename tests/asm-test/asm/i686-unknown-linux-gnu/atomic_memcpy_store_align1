asm_test::atomic_memcpy_store_align1::release:
 push    ebx
 push    edi
 push    esi
 sub     esp, 64
 mov     ecx, dword, ptr, [esp, +, 84]
 mov     eax, dword, ptr, [esp, +, 80]
 lea     ebx, [esp, +, 31]
 lea     esi, [esp, +, 24]
 lea     edx, [esp, +, 16]
 movsd   xmm1, qword, ptr, [ecx, +, 16]
 movsd   xmm0, qword, ptr, [ecx, +, 24]
 movsd   xmm3, qword, ptr, [ecx]
 lea     edi, [eax, +, 31]
 movsd   qword, ptr, [esp, +, 48], xmm1
 movsd   xmm1, qword, ptr, [ecx, +, 8]
 movsd   qword, ptr, [esp, +, 56], xmm0
 movsd   qword, ptr, [esp, +, 32], xmm3
 lea     ecx, [esp, +, 8]
 movsd   qword, ptr, [esp, +, 40], xmm1
 #MEMBARRIER
 movsd   xmm2, qword, ptr, [esp, +, 56]
 movsd   xmm1, qword, ptr, [esp, +, 48]
 movsd   qword, ptr, [esp, +, 24], xmm2
 movsd   qword, ptr, [esp, +, 16], xmm1
 movsd   xmm2, qword, ptr, [esp, +, 32]
 movsd   xmm1, qword, ptr, [esp, +, 40]
 movsd   qword, ptr, [esp, +, 8], xmm1
 movsd   qword, ptr, [esp], xmm2
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 30]
 lea     ebx, [esp, +, 30]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 29]
 lea     ebx, [esp, +, 29]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 28]
 lea     ebx, [esp, +, 28]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 27]
 lea     ebx, [esp, +, 27]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 26]
 lea     ebx, [esp, +, 26]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 25]
 lea     ebx, [esp, +, 25]
 #APP
 mov     bl, byte, ptr, [ebx]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     edi, [eax, +, 24]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edi], bl
 #NO_APP
 lea     esi, [eax, +, 23]
 lea     edi, [esp, +, 23]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 22]
 lea     edi, [esp, +, 22]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 21]
 lea     edi, [esp, +, 21]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 20]
 lea     edi, [esp, +, 20]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 19]
 lea     edi, [esp, +, 19]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 18]
 lea     edi, [esp, +, 18]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 17]
 lea     edi, [esp, +, 17]
 #APP
 mov     bl, byte, ptr, [edi]
 mov     byte, ptr, [esi], bl
 #NO_APP
 lea     esi, [eax, +, 16]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [eax, +, 15]
 lea     esi, [esp, +, 15]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 14]
 lea     esi, [esp, +, 14]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 13]
 lea     esi, [esp, +, 13]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 12]
 lea     esi, [esp, +, 12]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 11]
 lea     esi, [esp, +, 11]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 10]
 lea     esi, [esp, +, 10]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 9]
 lea     esi, [esp, +, 9]
 #APP
 mov     bl, byte, ptr, [esi]
 mov     byte, ptr, [edx], bl
 #NO_APP
 lea     edx, [eax, +, 8]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [eax, +, 7]
 lea     edx, [esp, +, 7]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 6]
 lea     edx, [esp, +, 6]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 5]
 lea     edx, [esp, +, 5]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 4]
 lea     edx, [esp, +, 4]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 3]
 lea     edx, [esp, +, 3]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 2]
 lea     edx, [esp, +, 2]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 lea     ecx, [eax, +, 1]
 lea     edx, [esp, +, 1]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 mov     ecx, esp
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [eax], cl
 #NO_APP
 add     esp, 64
 pop     esi
 pop     edi
 pop     ebx
 ret
asm_test::atomic_memcpy_store_align1::write_volatile_release_fence:
 sub     esp, 32
 mov     ecx, dword, ptr, [esp, +, 40]
 #MEMBARRIER
 mov     eax, dword, ptr, [esp, +, 36]
 movsd   xmm0, qword, ptr, [ecx, +, 24]
 movsd   xmm1, qword, ptr, [ecx, +, 8]
 movsd   qword, ptr, [esp, +, 24], xmm0
 movsd   xmm0, qword, ptr, [ecx, +, 16]
 movsd   qword, ptr, [esp, +, 8], xmm1
 movsd   qword, ptr, [esp, +, 16], xmm0
 movsd   xmm0, qword, ptr, [ecx]
 movsd   qword, ptr, [esp], xmm0
 movsd   xmm0, qword, ptr, [esp, +, 24]
 movsd   qword, ptr, [eax, +, 24], xmm0
 movsd   xmm0, qword, ptr, [esp, +, 16]
 movsd   qword, ptr, [eax, +, 16], xmm0
 movsd   xmm0, qword, ptr, [esp, +, 8]
 movsd   qword, ptr, [eax, +, 8], xmm0
 movsd   xmm0, qword, ptr, [esp]
 movsd   qword, ptr, [eax], xmm0
 add     esp, 32
 ret
