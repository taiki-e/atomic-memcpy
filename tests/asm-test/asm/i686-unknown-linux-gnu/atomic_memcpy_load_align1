asm_test::atomic_memcpy_load_align1::acquire:
 push    esi
 sub     esp, 32
 mov     ecx, dword, ptr, [esp, +, 44]
 lea     esi, [esp, +, 31]
 mov     eax, dword, ptr, [esp, +, 40]
 lea     edx, [ecx, +, 31]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 30]
 lea     esi, [esp, +, 30]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 29]
 lea     esi, [esp, +, 29]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 28]
 lea     esi, [esp, +, 28]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 27]
 lea     esi, [esp, +, 27]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 26]
 lea     esi, [esp, +, 26]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 25]
 lea     esi, [esp, +, 25]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 24]
 lea     esi, [esp, +, 24]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 23]
 lea     esi, [esp, +, 23]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 22]
 lea     esi, [esp, +, 22]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 21]
 lea     esi, [esp, +, 21]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 20]
 lea     esi, [esp, +, 20]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 19]
 lea     esi, [esp, +, 19]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 18]
 lea     esi, [esp, +, 18]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 17]
 lea     esi, [esp, +, 17]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 16]
 lea     esi, [esp, +, 16]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 15]
 lea     esi, [esp, +, 15]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 14]
 lea     esi, [esp, +, 14]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 13]
 lea     esi, [esp, +, 13]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 12]
 lea     esi, [esp, +, 12]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 11]
 lea     esi, [esp, +, 11]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 10]
 lea     esi, [esp, +, 10]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 9]
 lea     esi, [esp, +, 9]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 8]
 lea     esi, [esp, +, 8]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 7]
 lea     esi, [esp, +, 7]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 6]
 lea     esi, [esp, +, 6]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 5]
 lea     esi, [esp, +, 5]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 4]
 lea     esi, [esp, +, 4]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 3]
 lea     esi, [esp, +, 3]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 2]
 lea     esi, [esp, +, 2]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 lea     edx, [ecx, +, 1]
 lea     esi, [esp, +, 1]
 #APP
 mov     dl, byte, ptr, [edx]
 mov     byte, ptr, [esi], dl
 #NO_APP
 mov     edx, esp
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 movsd   xmm1, qword, ptr, [esp, +, 8]
 movsd   xmm0, qword, ptr, [esp]
 movsd   xmm2, qword, ptr, [esp, +, 16]
 movsd   qword, ptr, [eax, +, 8], xmm1
 movsd   xmm1, qword, ptr, [esp, +, 24]
 movsd   qword, ptr, [eax], xmm0
 movsd   qword, ptr, [eax, +, 16], xmm2
 movsd   qword, ptr, [eax, +, 24], xmm1
 #MEMBARRIER
 add     esp, 32
 pop     esi
 ret     4
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    ebx
 push    esi
 sub     esp, 28
 mov     esi, dword, ptr, [esp, +, 44]
 mov     eax, dword, ptr, [esp, +, 40]
 mov     cl, byte, ptr, [esi, +, 31]
 mov     byte, ptr, [esp, +, 27], cl
 mov     cl, byte, ptr, [esi, +, 30]
 mov     byte, ptr, [esp, +, 26], cl
 mov     cl, byte, ptr, [esi, +, 29]
 mov     byte, ptr, [esp, +, 25], cl
 mov     cl, byte, ptr, [esi, +, 28]
 mov     byte, ptr, [esp, +, 24], cl
 mov     cl, byte, ptr, [esi, +, 27]
 mov     byte, ptr, [esp, +, 23], cl
 mov     cl, byte, ptr, [esi, +, 26]
 mov     byte, ptr, [esp, +, 22], cl
 mov     cl, byte, ptr, [esi, +, 25]
 mov     byte, ptr, [esp, +, 21], cl
 mov     cl, byte, ptr, [esi, +, 24]
 mov     byte, ptr, [esp, +, 20], cl
 mov     cl, byte, ptr, [esi, +, 23]
 mov     byte, ptr, [esp, +, 19], cl
 mov     cl, byte, ptr, [esi, +, 22]
 mov     byte, ptr, [esp, +, 18], cl
 mov     cl, byte, ptr, [esi, +, 21]
 mov     byte, ptr, [esp, +, 17], cl
 mov     cl, byte, ptr, [esi, +, 20]
 mov     byte, ptr, [esp, +, 16], cl
 mov     cl, byte, ptr, [esi, +, 19]
 mov     byte, ptr, [esp, +, 15], cl
 mov     cl, byte, ptr, [esi, +, 18]
 mov     byte, ptr, [esp, +, 14], cl
 mov     cl, byte, ptr, [esi, +, 17]
 mov     byte, ptr, [esp, +, 13], cl
 mov     cl, byte, ptr, [esi, +, 16]
 mov     byte, ptr, [esp, +, 12], cl
 mov     cl, byte, ptr, [esi, +, 15]
 mov     byte, ptr, [esp, +, 11], cl
 mov     cl, byte, ptr, [esi, +, 14]
 mov     byte, ptr, [esp, +, 10], cl
 mov     cl, byte, ptr, [esi, +, 13]
 mov     byte, ptr, [esp, +, 9], cl
 mov     cl, byte, ptr, [esi, +, 12]
 mov     byte, ptr, [esp, +, 8], cl
 mov     cl, byte, ptr, [esi, +, 11]
 mov     byte, ptr, [esp, +, 7], cl
 mov     cl, byte, ptr, [esi, +, 10]
 mov     byte, ptr, [esp, +, 6], cl
 mov     cl, byte, ptr, [esi, +, 9]
 mov     byte, ptr, [esp, +, 5], cl
 mov     cl, byte, ptr, [esi, +, 8]
 mov     byte, ptr, [esp, +, 4], cl
 mov     cl, byte, ptr, [esi, +, 7]
 mov     byte, ptr, [esp, +, 3], cl
 mov     cl, byte, ptr, [esi, +, 6]
 mov     byte, ptr, [esp, +, 2], cl
 mov     bh, byte, ptr, [esi, +, 5]
 mov     bl, byte, ptr, [esi, +, 4]
 mov     dh, byte, ptr, [esi, +, 3]
 mov     ch, byte, ptr, [esi, +, 2]
 mov     cl, byte, ptr, [esi]
 mov     dl, byte, ptr, [esi, +, 1]
 mov     byte, ptr, [eax], cl
 mov     cl, byte, ptr, [esp, +, 2]
 mov     byte, ptr, [eax, +, 1], dl
 mov     byte, ptr, [eax, +, 2], ch
 mov     byte, ptr, [eax, +, 3], dh
 mov     byte, ptr, [eax, +, 4], bl
 mov     byte, ptr, [eax, +, 5], bh
 mov     ch, byte, ptr, [esp, +, 26]
 mov     dl, byte, ptr, [esp, +, 27]
 mov     byte, ptr, [eax, +, 6], cl
 mov     cl, byte, ptr, [esp, +, 3]
 mov     byte, ptr, [eax, +, 7], cl
 mov     cl, byte, ptr, [esp, +, 4]
 mov     byte, ptr, [eax, +, 8], cl
 mov     cl, byte, ptr, [esp, +, 5]
 mov     byte, ptr, [eax, +, 9], cl
 mov     cl, byte, ptr, [esp, +, 6]
 mov     byte, ptr, [eax, +, 10], cl
 mov     cl, byte, ptr, [esp, +, 7]
 mov     byte, ptr, [eax, +, 11], cl
 mov     cl, byte, ptr, [esp, +, 8]
 mov     byte, ptr, [eax, +, 12], cl
 mov     cl, byte, ptr, [esp, +, 9]
 mov     byte, ptr, [eax, +, 13], cl
 mov     cl, byte, ptr, [esp, +, 10]
 mov     byte, ptr, [eax, +, 14], cl
 mov     cl, byte, ptr, [esp, +, 11]
 mov     byte, ptr, [eax, +, 15], cl
 mov     cl, byte, ptr, [esp, +, 12]
 mov     byte, ptr, [eax, +, 16], cl
 mov     cl, byte, ptr, [esp, +, 13]
 mov     byte, ptr, [eax, +, 17], cl
 mov     cl, byte, ptr, [esp, +, 14]
 mov     byte, ptr, [eax, +, 18], cl
 mov     cl, byte, ptr, [esp, +, 15]
 mov     byte, ptr, [eax, +, 19], cl
 mov     cl, byte, ptr, [esp, +, 16]
 mov     byte, ptr, [eax, +, 20], cl
 mov     cl, byte, ptr, [esp, +, 17]
 mov     byte, ptr, [eax, +, 21], cl
 mov     cl, byte, ptr, [esp, +, 18]
 mov     byte, ptr, [eax, +, 22], cl
 mov     cl, byte, ptr, [esp, +, 19]
 mov     byte, ptr, [eax, +, 23], cl
 mov     cl, byte, ptr, [esp, +, 20]
 mov     byte, ptr, [eax, +, 24], cl
 mov     cl, byte, ptr, [esp, +, 21]
 mov     byte, ptr, [eax, +, 25], cl
 mov     cl, byte, ptr, [esp, +, 22]
 mov     byte, ptr, [eax, +, 26], cl
 mov     cl, byte, ptr, [esp, +, 23]
 mov     byte, ptr, [eax, +, 27], cl
 mov     cl, byte, ptr, [esp, +, 24]
 mov     byte, ptr, [eax, +, 28], cl
 mov     cl, byte, ptr, [esp, +, 25]
 mov     byte, ptr, [eax, +, 29], cl
 mov     byte, ptr, [eax, +, 30], ch
 mov     byte, ptr, [eax, +, 31], dl
 #MEMBARRIER
 add     esp, 28
 pop     esi
 pop     ebx
 ret     4
