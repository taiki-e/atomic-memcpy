asm_test::atomic_memcpy_load_align2::acquire:
 push    {r4, r5, r11, lr}
 sub     sp, sp, #32
 add     r2, r1, #3
 bic     r2, r2, #3
 sub     lr, r2, r1
 cmp     lr, #33
 bhs     .LBB4_3
 cmp     r2, r1
 bne     .LBB4_4
 mov     r3, #32
 mov     lr, #0
 b       .LBB4_7
.LBB4_3:
 ldrh    r2, [r1, #30]
 strh    r2, [sp, #30]
 ldrh    r2, [r1, #28]
 strh    r2, [sp, #28]
 ldrh    r2, [r1, #26]
 strh    r2, [sp, #26]
 ldrh    r2, [r1, #24]
 strh    r2, [sp, #24]
 ldrh    r2, [r1, #22]
 strh    r2, [sp, #22]
 ldrh    r2, [r1, #20]
 strh    r2, [sp, #20]
 ldrh    r2, [r1, #18]
 strh    r2, [sp, #18]
 ldrh    r2, [r1, #16]
 strh    r2, [sp, #16]
 ldrh    r2, [r1, #14]
 strh    r2, [sp, #14]
 ldrh    r2, [r1, #12]
 strh    r2, [sp, #12]
 ldrh    r2, [r1, #10]
 strh    r2, [sp, #10]
 ldrh    r2, [r1, #8]
 strh    r2, [sp, #8]
 ldrh    r2, [r1, #6]
 strh    r2, [sp, #6]
 ldrh    r2, [r1, #4]
 strh    r2, [sp, #4]
 ldrh    r2, [r1, #2]
 strh    r2, [sp, #2]
 ldrh    r1, [r1]
 strh    r1, [sp]
 b       .LBB4_12
.LBB4_4:
 cmp     lr, #1
 mov     r12, sp
 movls   lr, #1
 mov     r3, r1
 mov     r2, lr
.LBB4_5:
 ldrb    r4, [r3]
 subs    r2, r2, #1
 strb    r4, [r12], #1
 add     r3, r3, #1
 bne     .LBB4_5
 rsb     r3, lr, #32
 cmp     r3, #4
 blo     .LBB4_9
.LBB4_7:
 mov     r12, sp
.LBB4_8:
 ldr     r2, [r1, lr]
 add     r4, r12, lr
 sub     r3, r3, #4
 strb    r2, [r12, lr]
 add     lr, lr, #4
 cmp     r3, #3
 lsr     r5, r2, #24
 strb    r5, [r4, #3]
 lsr     r5, r2, #16
 lsr     r2, r2, #8
 strb    r5, [r4, #2]
 strb    r2, [r4, #1]
 bhi     .LBB4_8
.LBB4_9:
 cmp     r3, #0
 beq     .LBB4_12
 mov     r2, sp
 add     r1, r1, lr
 add     r2, r2, lr
.LBB4_11:
 ldrb    r5, [r1]
 add     r1, r1, #1
 strb    r5, [r2], #1
 subs    r3, r3, #1
 bne     .LBB4_11
.LBB4_12:
 mov     r1, sp
 mov     r2, #32
 bl      memcpy
 mov     r0, #0
 mcr     p15, #0, r0, c7, c10, #5
 add     sp, sp, #32
 pop     {r4, r5, r11, pc}
.LBB6_3:
 ldrb    r7, [r1], #1
 subs    r2, r2, #1
 strb    r7, [r3]
 add     r3, r3, #1
 bne     .LBB6_3
 rsb     r6, r0, #32
 cmp     r6, #4
 blo     .LBB6_7
.LBB6_5:
 add     r1, sp, #32
.LBB6_6:
 add     r3, r1, r0
 ldrb    r2, [r1, r0]
 sub     r6, r6, #4
 ldrb    r7, [r3, #1]
 cmp     r6, #3
 ldrb    r5, [r3, #2]
 ldrb    r3, [r3, #3]
 orr     r2, r2, r7, lsl, #8
 orr     r3, r5, r3, lsl, #8
 orr     r2, r2, r3, lsl, #16
 str     r2, [r9, r0]
 add     r0, r0, #4
 bhi     .LBB6_6
.LBB6_7:
 cmp     r6, #0
 beq     .LBB6_10
 add     r1, sp, #32
 add     r1, r1, r0
 add     r0, r9, r0
.LBB6_9:
 ldrb    r2, [r1], #1
 subs    r6, r6, #1
 strb    r2, [r0]
 add     r0, r0, #1
 bne     .LBB6_9
.LBB6_10:
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, r9, r11, pc}
.LBB6_11:
 ldrh    r0, [sp, #62]
 strh    r0, [r9, #30]
 ldrh    r0, [sp, #60]
 strh    r0, [r9, #28]
 ldrh    r0, [sp, #58]
 strh    r0, [r9, #26]
 ldrh    r0, [sp, #56]
 strh    r0, [r9, #24]
 ldrh    r0, [sp, #54]
 strh    r0, [r9, #22]
 ldrh    r0, [sp, #52]
 strh    r0, [r9, #20]
 ldrh    r0, [sp, #50]
 strh    r0, [r9, #18]
 ldrh    r0, [sp, #48]
 strh    r0, [r9, #16]
 ldrh    r0, [sp, #46]
 strh    r0, [r9, #14]
 ldrh    r0, [sp, #44]
 strh    r0, [r9, #12]
 ldrh    r0, [sp, #42]
 strh    r0, [r9, #10]
 ldrh    r0, [sp, #40]
 strh    r0, [r9, #8]
 ldrh    r0, [sp, #38]
 strh    r0, [r9, #6]
 ldrh    r0, [sp, #36]
 strh    r0, [r9, #4]
 ldrh    r0, [sp, #34]
 strh    r0, [r9, #2]
 ldrh    r0, [sp, #32]
 strh    r0, [r9]
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, r9, r11, pc}
asm_test::atomic_memcpy_load_align2::read_volatile_acquire_fence:
 push    {r4, r5, r11, lr}
 ldrh    r2, [r1, #28]
 ldrh    r3, [r1, #26]
 ldrh    r12, [r1, #24]
 ldrh    lr, [r1, #22]
 ldrh    r4, [r1, #20]
 ldrh    r5, [r1, #30]
 strh    r5, [r0, #30]
 ldrh    r5, [r1, #18]
 strh    r2, [r0, #28]
 ldrh    r2, [r1, #16]
 strh    r3, [r0, #26]
 ldrh    r3, [r1, #14]
 strh    r12, [r0, #24]
 ldrh    r12, [r1, #10]
 strh    lr, [r0, #22]
 ldrh    lr, [r1, #8]
 strh    r4, [r0, #20]
 ldrh    r4, [r1, #6]
 strh    r5, [r0, #18]
 ldrh    r5, [r1, #4]
 strh    r2, [r0, #16]
 ldrh    r2, [r1, #2]
 strh    r3, [r0, #14]
 ldrh    r3, [r1]
 ldrh    r1, [r1, #12]
 strh    r1, [r0, #12]
 strh    r12, [r0, #10]
 strh    lr, [r0, #8]
 strh    r4, [r0, #6]
 strh    r5, [r0, #4]
 strh    r2, [r0, #2]
 strh    r3, [r0]
 mov     r0, #0
 mcr     p15, #0, r0, c7, c10, #5
 pop     {r4, r5, r11, pc}
.LBB6_3:
 ldrb    r7, [r1], #1
 subs    r2, r2, #1
 strb    r7, [r3]
 add     r3, r3, #1
 bne     .LBB6_3
 rsb     r6, r0, #32
 cmp     r6, #4
 blo     .LBB6_7
.LBB6_5:
 add     r1, sp, #32
.LBB6_6:
 add     r3, r1, r0
 ldrb    r2, [r1, r0]
 sub     r6, r6, #4
 ldrb    r7, [r3, #1]
 cmp     r6, #3
 ldrb    r5, [r3, #2]
 ldrb    r3, [r3, #3]
 orr     r2, r2, r7, lsl, #8
 orr     r3, r5, r3, lsl, #8
 orr     r2, r2, r3, lsl, #16
 str     r2, [r9, r0]
 add     r0, r0, #4
 bhi     .LBB6_6
.LBB6_7:
 cmp     r6, #0
 beq     .LBB6_10
 add     r1, sp, #32
 add     r1, r1, r0
 add     r0, r9, r0
.LBB6_9:
 ldrb    r2, [r1], #1
 subs    r6, r6, #1
 strb    r2, [r0]
 add     r0, r0, #1
 bne     .LBB6_9
.LBB6_10:
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, r9, r11, pc}
.LBB6_11:
 ldrh    r0, [sp, #62]
 strh    r0, [r9, #30]
 ldrh    r0, [sp, #60]
 strh    r0, [r9, #28]
 ldrh    r0, [sp, #58]
 strh    r0, [r9, #26]
 ldrh    r0, [sp, #56]
 strh    r0, [r9, #24]
 ldrh    r0, [sp, #54]
 strh    r0, [r9, #22]
 ldrh    r0, [sp, #52]
 strh    r0, [r9, #20]
 ldrh    r0, [sp, #50]
 strh    r0, [r9, #18]
 ldrh    r0, [sp, #48]
 strh    r0, [r9, #16]
 ldrh    r0, [sp, #46]
 strh    r0, [r9, #14]
 ldrh    r0, [sp, #44]
 strh    r0, [r9, #12]
 ldrh    r0, [sp, #42]
 strh    r0, [r9, #10]
 ldrh    r0, [sp, #40]
 strh    r0, [r9, #8]
 ldrh    r0, [sp, #38]
 strh    r0, [r9, #6]
 ldrh    r0, [sp, #36]
 strh    r0, [r9, #4]
 ldrh    r0, [sp, #34]
 strh    r0, [r9, #2]
 ldrh    r0, [sp, #32]
 strh    r0, [r9]
 add     sp, sp, #64
 pop     {r4, r5, r6, r7, r8, r9, r11, pc}
