asm_test::atomic_memcpy_load_align1::acquire:
 push    {r4, r5, r6, lr}
 sub     sp, sp, #32
 mov     r2, r0
 mov     r3, r1
 add     r4, r1, #31
 mov     r1, sp
 add     r5, r1, #31
 mov     r0, #0
 @APP
 ldrb    r4, [r4]
 strb    r4, [r5]
 @NO_APP
 mov     r6, #0
 add     r5, r3, #30
 add     r4, r1, #30
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #29
 add     r4, r1, #29
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #28
 add     r4, r1, #28
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #27
 add     r4, r1, #27
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #26
 add     r4, r1, #26
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #25
 add     r4, r1, #25
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #24
 add     r4, r1, #24
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #23
 add     r4, r1, #23
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #22
 add     r4, r1, #22
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #21
 add     r4, r1, #21
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #20
 add     r4, r1, #20
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #19
 add     r4, r1, #19
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #18
 add     r4, r1, #18
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #17
 add     r4, r1, #17
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #16
 add     r4, r1, #16
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #15
 add     r4, r1, #15
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #14
 add     r4, r1, #14
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #13
 add     r4, r1, #13
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #12
 add     r4, r1, #12
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #11
 add     r4, r1, #11
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #10
 add     r4, r1, #10
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #9
 add     r4, r1, #9
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #8
 add     r4, r1, #8
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #7
 orr     r4, r1, #7
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #6
 orr     r4, r1, #6
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #5
 orr     r4, r1, #5
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #4
 orr     r4, r1, #4
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #3
 orr     r4, r1, #3
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #2
 orr     r4, r1, #2
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 add     r5, r3, #1
 orr     r4, r1, #1
 mov     r0, #0
 @APP
 ldrb    r5, [r5]
 strb    r5, [r4]
 @NO_APP
 mov     r5, r1
 mov     r0, #0
 @APP
 ldrb    r3, [r3]
 strb    r3, [r5]
 @NO_APP
 mov     r0, r2
 mov     r2, #32
 bl      memcpy
 mcr     p15, #0, r6, c7, c10, #5
 add     sp, sp, #32
 pop     {r4, r5, r6, pc}
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 sub     sp, sp, #76
 ldrb    r2, [r1]
 str     r2, [sp, #72]
 ldrb    r2, [r1, #1]
 str     r2, [sp, #68]
 ldrb    r2, [r1, #2]
 str     r2, [sp, #64]
 ldrb    r2, [r1, #3]
 str     r2, [sp, #60]
 ldrb    r2, [r1, #4]
 str     r2, [sp, #56]
 ldrb    r2, [r1, #5]
 str     r2, [sp, #52]
 ldrb    r2, [r1, #6]
 str     r2, [sp, #48]
 ldrb    r2, [r1, #7]
 str     r2, [sp, #44]
 ldrb    r2, [r1, #8]
 str     r2, [sp, #40]
 ldrb    r2, [r1, #9]
 str     r2, [sp, #36]
 ldrb    r2, [r1, #10]
 str     r2, [sp, #32]
 ldrb    r2, [r1, #11]
 str     r2, [sp, #28]
 ldrb    r2, [r1, #12]
 str     r2, [sp, #24]
 ldrb    r2, [r1, #13]
 str     r2, [sp, #20]
 ldrb    r2, [r1, #14]
 str     r2, [sp, #16]
 ldrb    r2, [r1, #15]
 str     r2, [sp, #12]
 ldrb    r2, [r1, #16]
 str     r2, [sp, #8]
 ldrb    r2, [r1, #17]
 str     r2, [sp, #4]
 ldrb    r2, [r1, #18]
 str     r2, [sp]
 ldrb    r11, [r1, #19]
 ldrb    r10, [r1, #20]
 ldrb    r9, [r1, #21]
 ldrb    r8, [r1, #22]
 ldrb    r7, [r1, #23]
 ldrb    r6, [r1, #24]
 ldrb    r5, [r1, #25]
 ldrb    r4, [r1, #26]
 ldrb    lr, [r1, #27]
 ldrb    r12, [r1, #28]
 ldrb    r3, [r1, #29]
 ldrb    r2, [r1, #30]
 ldrb    r1, [r1, #31]
 strb    r1, [r0, #31]
 ldr     r1, [sp]
 strb    r1, [r0, #18]
 ldr     r1, [sp, #4]
 strb    r1, [r0, #17]
 ldr     r1, [sp, #8]
 strb    r1, [r0, #16]
 ldr     r1, [sp, #12]
 strb    r1, [r0, #15]
 ldr     r1, [sp, #16]
 strb    r1, [r0, #14]
 ldr     r1, [sp, #20]
 strb    r1, [r0, #13]
 ldr     r1, [sp, #24]
 strb    r1, [r0, #12]
 ldr     r1, [sp, #28]
 strb    r1, [r0, #11]
 ldr     r1, [sp, #32]
 strb    r1, [r0, #10]
 ldr     r1, [sp, #36]
 strb    r1, [r0, #9]
 ldr     r1, [sp, #40]
 strb    r1, [r0, #8]
 ldr     r1, [sp, #44]
 strb    r1, [r0, #7]
 ldr     r1, [sp, #48]
 strb    r1, [r0, #6]
 ldr     r1, [sp, #52]
 strb    r1, [r0, #5]
 ldr     r1, [sp, #56]
 strb    r1, [r0, #4]
 ldr     r1, [sp, #60]
 strb    r1, [r0, #3]
 ldr     r1, [sp, #64]
 strb    r1, [r0, #2]
 ldr     r1, [sp, #68]
 strb    r1, [r0, #1]
 ldr     r1, [sp, #72]
 strb    r2, [r0, #30]
 strb    r3, [r0, #29]
 strb    r12, [r0, #28]
 strb    lr, [r0, #27]
 strb    r4, [r0, #26]
 strb    r5, [r0, #25]
 strb    r6, [r0, #24]
 strb    r7, [r0, #23]
 strb    r8, [r0, #22]
 strb    r9, [r0, #21]
 strb    r10, [r0, #20]
 strb    r11, [r0, #19]
 strb    r1, [r0]
 mov     r0, #0
 mcr     p15, #0, r0, c7, c10, #5
 add     sp, sp, #76
 pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
