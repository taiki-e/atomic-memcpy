asm_test::atomic_memcpy_load_align2::acquire:
 push    ebp
 push    ebx
 push    edi
 push    esi
 sub     esp, 36
 mov     eax, dword, ptr, [esp, +, 56]
 mov     ebp, dword, ptr, [esp, +, 60]
 lea     edi, [ebp, +, 3]
 and     edi, -4
 mov     esi, edi
 sub     esi, ebp
 cmp     esi, 32
 ja      .LBB4_4
 test    esi, esi
 je      .LBB4_2
 lea     edx, [ebp, +, 32]
 xor     ebx, ebx
.LBB4_11:
 movzx   ecx, byte, ptr, [ebp, +, ebx]
 mov     byte, ptr, [esp, +, ebx], cl
 inc     ebx
 cmp     esi, ebx
 jne     .LBB4_11
 sub     edx, edi
 cmp     edx, 4
 jae     .LBB4_3
 jmp     .LBB4_7
.LBB4_4:
 movzx   edx, word, ptr, [ebp, +, 30]
 mov     word, ptr, [esp, +, 30], dx
 movzx   edx, word, ptr, [ebp, +, 28]
 mov     word, ptr, [esp, +, 28], dx
 movzx   edx, word, ptr, [ebp, +, 26]
 mov     word, ptr, [esp, +, 26], dx
 movzx   edx, word, ptr, [ebp, +, 24]
 mov     word, ptr, [esp, +, 24], dx
 movzx   edx, word, ptr, [ebp, +, 22]
 mov     word, ptr, [esp, +, 22], dx
 movzx   edx, word, ptr, [ebp, +, 20]
 mov     word, ptr, [esp, +, 20], dx
 movzx   edx, word, ptr, [ebp, +, 18]
 mov     word, ptr, [esp, +, 18], dx
 movzx   edx, word, ptr, [ebp, +, 16]
 mov     word, ptr, [esp, +, 16], dx
 movzx   edx, word, ptr, [ebp, +, 14]
 mov     word, ptr, [esp, +, 14], dx
 movzx   edx, word, ptr, [ebp, +, 12]
 mov     word, ptr, [esp, +, 12], dx
 movzx   edx, word, ptr, [ebp, +, 10]
 mov     word, ptr, [esp, +, 10], dx
 movzx   edx, word, ptr, [ebp, +, 8]
 mov     word, ptr, [esp, +, 8], dx
 movzx   edx, word, ptr, [ebp, +, 6]
 mov     word, ptr, [esp, +, 6], dx
 movzx   edx, word, ptr, [ebp, +, 4]
 mov     word, ptr, [esp, +, 4], dx
 movzx   edx, word, ptr, [ebp, +, 2]
 mov     word, ptr, [esp, +, 2], dx
 movzx   ecx, word, ptr, [ebp]
 mov     word, ptr, [esp], cx
 jmp     .LBB4_5
.LBB4_2:
 mov     edx, 32
.LBB4_3:
 mov     ecx, dword, ptr, [ebp, +, esi]
 mov     dword, ptr, [esp, +, esi], ecx
 add     edx, -4
 add     esi, 4
 cmp     edx, 3
 ja      .LBB4_3
.LBB4_7:
 test    edx, edx
 je      .LBB4_5
 lea     edi, [esp, +, esi]
 add     ebp, esi
 xor     esi, esi
.LBB4_9:
 movzx   ecx, byte, ptr, [ebp, +, esi]
 mov     byte, ptr, [edi, +, esi], cl
 inc     esi
 cmp     edx, esi
 jne     .LBB4_9
.LBB4_5:
 mov     ecx, dword, ptr, [esp, +, 28]
 mov     dword, ptr, [eax, +, 28], ecx
 mov     ecx, dword, ptr, [esp, +, 24]
 mov     dword, ptr, [eax, +, 24], ecx
 mov     ecx, dword, ptr, [esp, +, 20]
 mov     dword, ptr, [eax, +, 20], ecx
 mov     ecx, dword, ptr, [esp, +, 16]
 mov     dword, ptr, [eax, +, 16], ecx
 mov     ecx, dword, ptr, [esp, +, 12]
 mov     dword, ptr, [eax, +, 12], ecx
 mov     ecx, dword, ptr, [esp, +, 8]
 mov     dword, ptr, [eax, +, 8], ecx
 mov     ecx, dword, ptr, [esp]
 mov     edx, dword, ptr, [esp, +, 4]
 mov     dword, ptr, [eax, +, 4], edx
 mov     dword, ptr, [eax], ecx
 #MEMBARRIER
 add     esp, 36
 pop     esi
 pop     edi
 pop     ebx
 pop     ebp
 ret     4
asm_test::atomic_memcpy_load_align2::read_volatile_acquire_fence:
 push    ebp
 push    ebx
 push    edi
 push    esi
 sub     esp, 20
 mov     eax, dword, ptr, [esp, +, 44]
 movzx   ecx, word, ptr, [eax, +, 30]
 mov     word, ptr, [esp, +, 18], cx
 movzx   ecx, word, ptr, [eax, +, 28]
 mov     word, ptr, [esp, +, 16], cx
 movzx   ecx, word, ptr, [eax, +, 26]
 mov     word, ptr, [esp, +, 14], cx
 movzx   ecx, word, ptr, [eax, +, 24]
 mov     word, ptr, [esp, +, 12], cx
 movzx   ecx, word, ptr, [eax, +, 22]
 mov     word, ptr, [esp, +, 10], cx
 movzx   ecx, word, ptr, [eax, +, 20]
 mov     word, ptr, [esp, +, 8], cx
 movzx   ecx, word, ptr, [eax, +, 18]
 mov     word, ptr, [esp, +, 6], cx
 movzx   ecx, word, ptr, [eax, +, 16]
 mov     word, ptr, [esp, +, 4], cx
 movzx   ecx, word, ptr, [eax, +, 14]
 mov     word, ptr, [esp, +, 2], cx
 movzx   ecx, word, ptr, [eax, +, 12]
 mov     word, ptr, [esp], cx
 movzx   ebp, word, ptr, [eax, +, 10]
 movzx   ebx, word, ptr, [eax, +, 8]
 movzx   edi, word, ptr, [eax, +, 6]
 movzx   esi, word, ptr, [eax, +, 4]
 movzx   ecx, word, ptr, [eax]
 movzx   edx, word, ptr, [eax, +, 2]
 mov     eax, dword, ptr, [esp, +, 40]
 mov     word, ptr, [eax], cx
 mov     word, ptr, [eax, +, 2], dx
 mov     word, ptr, [eax, +, 4], si
 mov     word, ptr, [eax, +, 6], di
 mov     word, ptr, [eax, +, 8], bx
 mov     word, ptr, [eax, +, 10], bp
 movzx   ecx, word, ptr, [esp]
 mov     word, ptr, [eax, +, 12], cx
 movzx   ecx, word, ptr, [esp, +, 2]
 mov     word, ptr, [eax, +, 14], cx
 movzx   ecx, word, ptr, [esp, +, 4]
 mov     word, ptr, [eax, +, 16], cx
 movzx   ecx, word, ptr, [esp, +, 6]
 mov     word, ptr, [eax, +, 18], cx
 movzx   ecx, word, ptr, [esp, +, 8]
 mov     word, ptr, [eax, +, 20], cx
 movzx   ecx, word, ptr, [esp, +, 10]
 mov     word, ptr, [eax, +, 22], cx
 movzx   ecx, word, ptr, [esp, +, 12]
 mov     word, ptr, [eax, +, 24], cx
 movzx   ecx, word, ptr, [esp, +, 14]
 mov     word, ptr, [eax, +, 26], cx
 movzx   ecx, word, ptr, [esp, +, 16]
 mov     word, ptr, [eax, +, 28], cx
 movzx   ecx, word, ptr, [esp, +, 18]
 mov     word, ptr, [eax, +, 30], cx
 #MEMBARRIER
 add     esp, 20
 pop     esi
 pop     edi
 pop     ebx
 pop     ebp
 ret     4
