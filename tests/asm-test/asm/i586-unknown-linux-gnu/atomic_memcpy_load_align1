asm_test::atomic_memcpy_load_align1::acquire:
 push    ebx
 push    edi
 push    esi
 sub     esp, 32
 mov     eax, dword, ptr, [esp, +, 48]
 mov     ecx, dword, ptr, [esp, +, 52]
 lea     esi, [ecx, +, 3]
 and     esi, -4
 mov     edx, esi
 sub     edx, ecx
 cmp     edx, 33
 jae     .LBB0_1
 cmp     esi, ecx
 jne     .LBB0_5
 mov     esi, 32
 xor     edx, edx
 jmp     .LBB0_4
.LBB0_1:
 movzx   edx, byte, ptr, [ecx]
 mov     byte, ptr, [esp], dl
 movzx   edx, byte, ptr, [ecx, +, 1]
 mov     byte, ptr, [esp, +, 1], dl
 movzx   edx, byte, ptr, [ecx, +, 2]
 mov     byte, ptr, [esp, +, 2], dl
 movzx   edx, byte, ptr, [ecx, +, 3]
 mov     byte, ptr, [esp, +, 3], dl
 movzx   edx, byte, ptr, [ecx, +, 4]
 mov     byte, ptr, [esp, +, 4], dl
 movzx   edx, byte, ptr, [ecx, +, 5]
 mov     byte, ptr, [esp, +, 5], dl
 movzx   edx, byte, ptr, [ecx, +, 6]
 mov     byte, ptr, [esp, +, 6], dl
 movzx   edx, byte, ptr, [ecx, +, 7]
 mov     byte, ptr, [esp, +, 7], dl
 movzx   edx, byte, ptr, [ecx, +, 8]
 mov     byte, ptr, [esp, +, 8], dl
 movzx   edx, byte, ptr, [ecx, +, 9]
 mov     byte, ptr, [esp, +, 9], dl
 movzx   edx, byte, ptr, [ecx, +, 10]
 mov     byte, ptr, [esp, +, 10], dl
 movzx   edx, byte, ptr, [ecx, +, 11]
 mov     byte, ptr, [esp, +, 11], dl
 movzx   edx, byte, ptr, [ecx, +, 12]
 mov     byte, ptr, [esp, +, 12], dl
 movzx   edx, byte, ptr, [ecx, +, 13]
 mov     byte, ptr, [esp, +, 13], dl
 movzx   edx, byte, ptr, [ecx, +, 14]
 mov     byte, ptr, [esp, +, 14], dl
 movzx   edx, byte, ptr, [ecx, +, 15]
 mov     byte, ptr, [esp, +, 15], dl
 movzx   edx, byte, ptr, [ecx, +, 16]
 mov     byte, ptr, [esp, +, 16], dl
 movzx   edx, byte, ptr, [ecx, +, 17]
 mov     byte, ptr, [esp, +, 17], dl
 movzx   edx, byte, ptr, [ecx, +, 18]
 mov     byte, ptr, [esp, +, 18], dl
 movzx   edx, byte, ptr, [ecx, +, 19]
 mov     byte, ptr, [esp, +, 19], dl
 movzx   edx, byte, ptr, [ecx, +, 20]
 mov     byte, ptr, [esp, +, 20], dl
 movzx   edx, byte, ptr, [ecx, +, 21]
 mov     byte, ptr, [esp, +, 21], dl
 movzx   edx, byte, ptr, [ecx, +, 22]
 mov     byte, ptr, [esp, +, 22], dl
 movzx   edx, byte, ptr, [ecx, +, 23]
 mov     byte, ptr, [esp, +, 23], dl
 movzx   edx, byte, ptr, [ecx, +, 24]
 mov     byte, ptr, [esp, +, 24], dl
 movzx   edx, byte, ptr, [ecx, +, 25]
 mov     byte, ptr, [esp, +, 25], dl
 movzx   edx, byte, ptr, [ecx, +, 26]
 mov     byte, ptr, [esp, +, 26], dl
 movzx   edx, byte, ptr, [ecx, +, 27]
 mov     byte, ptr, [esp, +, 27], dl
 movzx   edx, byte, ptr, [ecx, +, 28]
 mov     byte, ptr, [esp, +, 28], dl
 movzx   edx, byte, ptr, [ecx, +, 29]
 mov     byte, ptr, [esp, +, 29], dl
 movzx   edx, byte, ptr, [ecx, +, 30]
 mov     byte, ptr, [esp, +, 30], dl
 movzx   ecx, byte, ptr, [ecx, +, 31]
 mov     byte, ptr, [esp, +, 31], cl
 mov     ecx, dword, ptr, [esp, +, 24]
 mov     dword, ptr, [eax, +, 24], ecx
 mov     ecx, dword, ptr, [esp, +, 20]
 mov     dword, ptr, [eax, +, 20], ecx
 mov     ecx, dword, ptr, [esp, +, 16]
 mov     dword, ptr, [eax, +, 16], ecx
 mov     ecx, dword, ptr, [esp, +, 12]
 mov     dword, ptr, [eax, +, 12], ecx
 mov     ecx, dword, ptr, [esp, +, 8]
 mov     dword, ptr, [eax, +, 8], ecx
 mov     ecx, dword, ptr, [esp]
 mov     edx, dword, ptr, [esp, +, 4]
 mov     dword, ptr, [eax, +, 4], edx
 mov     dword, ptr, [eax], ecx
 mov     ecx, dword, ptr, [esp, +, 28]
 mov     dword, ptr, [eax, +, 28], ecx
 jmp     .LBB0_14
.LBB0_5:
 cmp     edx, 2
 jae     .LBB0_7
 mov     edx, 1
.LBB0_7:
 xor     esi, esi
.LBB0_8:
 movzx   ebx, byte, ptr, [ecx, +, esi]
 mov     byte, ptr, [esp, +, esi], bl
 inc     esi
 cmp     edx, esi
 jne     .LBB0_8
 mov     esi, 32
 sub     esi, edx
 cmp     esi, 4
 jb      .LBB0_10
.LBB0_4:
 mov     edi, dword, ptr, [ecx, +, edx]
 mov     dword, ptr, [esp, +, edx], edi
 add     esi, -4
 add     edx, 4
 cmp     esi, 3
 ja      .LBB0_4
.LBB0_10:
 test    esi, esi
 je      .LBB0_13
 lea     edi, [esp, +, edx]
 add     ecx, edx
 xor     edx, edx
.LBB0_12:
 movzx   ebx, byte, ptr, [ecx, +, edx]
 mov     byte, ptr, [edi, +, edx], bl
 inc     edx
 cmp     esi, edx
 jne     .LBB0_12
.LBB0_13:
 mov     ecx, dword, ptr, [esp, +, 28]
 mov     dword, ptr, [eax, +, 28], ecx
 mov     ecx, dword, ptr, [esp, +, 24]
 mov     dword, ptr, [eax, +, 24], ecx
 mov     ecx, dword, ptr, [esp, +, 20]
 mov     dword, ptr, [eax, +, 20], ecx
 mov     ecx, dword, ptr, [esp, +, 16]
 mov     dword, ptr, [eax, +, 16], ecx
 mov     ecx, dword, ptr, [esp, +, 12]
 mov     dword, ptr, [eax, +, 12], ecx
 mov     ecx, dword, ptr, [esp, +, 8]
 mov     dword, ptr, [eax, +, 8], ecx
 mov     ecx, dword, ptr, [esp]
 mov     edx, dword, ptr, [esp, +, 4]
 mov     dword, ptr, [eax, +, 4], edx
 mov     dword, ptr, [eax], ecx
.LBB0_14:
 #MEMBARRIER
 add     esp, 32
 pop     esi
 pop     edi
 pop     ebx
 ret     4
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    ebx
 push    esi
 sub     esp, 28
 mov     eax, dword, ptr, [esp, +, 40]
 mov     esi, dword, ptr, [esp, +, 44]
 movzx   ecx, byte, ptr, [esi, +, 31]
 mov     byte, ptr, [esp, +, 27], cl
 movzx   ecx, byte, ptr, [esi, +, 30]
 mov     byte, ptr, [esp, +, 26], cl
 movzx   ecx, byte, ptr, [esi, +, 29]
 mov     byte, ptr, [esp, +, 25], cl
 movzx   ecx, byte, ptr, [esi, +, 28]
 mov     byte, ptr, [esp, +, 24], cl
 movzx   ecx, byte, ptr, [esi, +, 27]
 mov     byte, ptr, [esp, +, 23], cl
 movzx   ecx, byte, ptr, [esi, +, 26]
 mov     byte, ptr, [esp, +, 22], cl
 movzx   ecx, byte, ptr, [esi, +, 25]
 mov     byte, ptr, [esp, +, 21], cl
 movzx   ecx, byte, ptr, [esi, +, 24]
 mov     byte, ptr, [esp, +, 20], cl
 movzx   ecx, byte, ptr, [esi, +, 23]
 mov     byte, ptr, [esp, +, 19], cl
 movzx   ecx, byte, ptr, [esi, +, 22]
 mov     byte, ptr, [esp, +, 18], cl
 movzx   ecx, byte, ptr, [esi, +, 21]
 mov     byte, ptr, [esp, +, 17], cl
 movzx   ecx, byte, ptr, [esi, +, 20]
 mov     byte, ptr, [esp, +, 16], cl
 movzx   ecx, byte, ptr, [esi, +, 19]
 mov     byte, ptr, [esp, +, 15], cl
 movzx   ecx, byte, ptr, [esi, +, 18]
 mov     byte, ptr, [esp, +, 14], cl
 movzx   ecx, byte, ptr, [esi, +, 17]
 mov     byte, ptr, [esp, +, 13], cl
 movzx   ecx, byte, ptr, [esi, +, 16]
 mov     byte, ptr, [esp, +, 12], cl
 movzx   ecx, byte, ptr, [esi, +, 15]
 mov     byte, ptr, [esp, +, 11], cl
 movzx   ecx, byte, ptr, [esi, +, 14]
 mov     byte, ptr, [esp, +, 10], cl
 movzx   ecx, byte, ptr, [esi, +, 13]
 mov     byte, ptr, [esp, +, 9], cl
 movzx   ecx, byte, ptr, [esi, +, 12]
 mov     byte, ptr, [esp, +, 8], cl
 movzx   ecx, byte, ptr, [esi, +, 11]
 mov     byte, ptr, [esp, +, 7], cl
 movzx   ecx, byte, ptr, [esi, +, 10]
 mov     byte, ptr, [esp, +, 6], cl
 movzx   ecx, byte, ptr, [esi, +, 9]
 mov     byte, ptr, [esp, +, 5], cl
 movzx   ecx, byte, ptr, [esi, +, 8]
 mov     byte, ptr, [esp, +, 4], cl
 movzx   ecx, byte, ptr, [esi, +, 7]
 mov     byte, ptr, [esp, +, 3], cl
 movzx   ecx, byte, ptr, [esi, +, 6]
 mov     byte, ptr, [esp, +, 2], cl
 mov     bh, byte, ptr, [esi, +, 5]
 mov     bl, byte, ptr, [esi, +, 4]
 mov     dh, byte, ptr, [esi, +, 3]
 mov     ch, byte, ptr, [esi, +, 2]
 mov     cl, byte, ptr, [esi]
 mov     dl, byte, ptr, [esi, +, 1]
 mov     byte, ptr, [eax], cl
 mov     byte, ptr, [eax, +, 1], dl
 mov     byte, ptr, [eax, +, 2], ch
 mov     byte, ptr, [eax, +, 3], dh
 mov     byte, ptr, [eax, +, 4], bl
 mov     byte, ptr, [eax, +, 5], bh
 movzx   ecx, byte, ptr, [esp, +, 2]
 mov     byte, ptr, [eax, +, 6], cl
 movzx   ecx, byte, ptr, [esp, +, 3]
 mov     byte, ptr, [eax, +, 7], cl
 movzx   ecx, byte, ptr, [esp, +, 4]
 mov     byte, ptr, [eax, +, 8], cl
 movzx   ecx, byte, ptr, [esp, +, 5]
 mov     byte, ptr, [eax, +, 9], cl
 movzx   ecx, byte, ptr, [esp, +, 6]
 mov     byte, ptr, [eax, +, 10], cl
 movzx   ecx, byte, ptr, [esp, +, 7]
 mov     byte, ptr, [eax, +, 11], cl
 movzx   ecx, byte, ptr, [esp, +, 8]
 mov     byte, ptr, [eax, +, 12], cl
 movzx   ecx, byte, ptr, [esp, +, 9]
 mov     byte, ptr, [eax, +, 13], cl
 movzx   ecx, byte, ptr, [esp, +, 10]
 mov     byte, ptr, [eax, +, 14], cl
 movzx   ecx, byte, ptr, [esp, +, 11]
 mov     byte, ptr, [eax, +, 15], cl
 movzx   ecx, byte, ptr, [esp, +, 12]
 mov     byte, ptr, [eax, +, 16], cl
 movzx   ecx, byte, ptr, [esp, +, 13]
 mov     byte, ptr, [eax, +, 17], cl
 movzx   ecx, byte, ptr, [esp, +, 14]
 mov     byte, ptr, [eax, +, 18], cl
 movzx   ecx, byte, ptr, [esp, +, 15]
 mov     byte, ptr, [eax, +, 19], cl
 movzx   ecx, byte, ptr, [esp, +, 16]
 mov     byte, ptr, [eax, +, 20], cl
 movzx   ecx, byte, ptr, [esp, +, 17]
 mov     byte, ptr, [eax, +, 21], cl
 movzx   ecx, byte, ptr, [esp, +, 18]
 mov     byte, ptr, [eax, +, 22], cl
 movzx   ecx, byte, ptr, [esp, +, 19]
 mov     byte, ptr, [eax, +, 23], cl
 movzx   ecx, byte, ptr, [esp, +, 20]
 mov     byte, ptr, [eax, +, 24], cl
 movzx   ecx, byte, ptr, [esp, +, 21]
 mov     byte, ptr, [eax, +, 25], cl
 movzx   ecx, byte, ptr, [esp, +, 22]
 mov     byte, ptr, [eax, +, 26], cl
 movzx   ecx, byte, ptr, [esp, +, 23]
 mov     byte, ptr, [eax, +, 27], cl
 movzx   ecx, byte, ptr, [esp, +, 24]
 mov     byte, ptr, [eax, +, 28], cl
 movzx   ecx, byte, ptr, [esp, +, 25]
 mov     byte, ptr, [eax, +, 29], cl
 movzx   ecx, byte, ptr, [esp, +, 26]
 mov     byte, ptr, [eax, +, 30], cl
 movzx   ecx, byte, ptr, [esp, +, 27]
 mov     byte, ptr, [eax, +, 31], cl
 #MEMBARRIER
 add     esp, 28
 pop     esi
 pop     ebx
 ret     4
