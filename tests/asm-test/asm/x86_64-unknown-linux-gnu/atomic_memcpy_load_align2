asm_test::atomic_memcpy_load_align2::acquire:
 sub     rsp, 64
 mov     rax, rdi
 lea     rcx, [rsi, +, 7]
 and     rcx, -8
 mov     r9, rcx
 sub     r9, rsi
 cmp     r9, 64
 ja      .LBB4_6
 test    r9, r9
 je      .LBB4_2
 mov     rdx, rsi
 not     rdx
 add     rcx, rdx
 mov     r8d, r9d
 and     r8d, 3
 cmp     rcx, 3
 jae     .LBB4_21
 mov     r11d, 64
 xor     edi, edi
 test    r8, r8
 jne     .LBB4_10
 jmp     .LBB4_13
.LBB4_6:
 movzx   ecx, word, ptr, [rsi, +, 62]
 mov     word, ptr, [rsp, +, 62], cx
 movzx   ecx, word, ptr, [rsi, +, 60]
 mov     word, ptr, [rsp, +, 60], cx
 movzx   ecx, word, ptr, [rsi, +, 58]
 mov     word, ptr, [rsp, +, 58], cx
 movzx   ecx, word, ptr, [rsi, +, 56]
 mov     word, ptr, [rsp, +, 56], cx
 movzx   ecx, word, ptr, [rsi, +, 54]
 mov     word, ptr, [rsp, +, 54], cx
 movzx   ecx, word, ptr, [rsi, +, 52]
 mov     word, ptr, [rsp, +, 52], cx
 movzx   ecx, word, ptr, [rsi, +, 50]
 mov     word, ptr, [rsp, +, 50], cx
 movzx   ecx, word, ptr, [rsi, +, 48]
 mov     word, ptr, [rsp, +, 48], cx
 movzx   ecx, word, ptr, [rsi, +, 46]
 mov     word, ptr, [rsp, +, 46], cx
 movzx   ecx, word, ptr, [rsi, +, 44]
 mov     word, ptr, [rsp, +, 44], cx
 movzx   ecx, word, ptr, [rsi, +, 42]
 mov     word, ptr, [rsp, +, 42], cx
 movzx   ecx, word, ptr, [rsi, +, 40]
 mov     word, ptr, [rsp, +, 40], cx
 movzx   ecx, word, ptr, [rsi, +, 38]
 mov     word, ptr, [rsp, +, 38], cx
 movzx   ecx, word, ptr, [rsi, +, 36]
 mov     word, ptr, [rsp, +, 36], cx
 movzx   ecx, word, ptr, [rsi, +, 34]
 mov     word, ptr, [rsp, +, 34], cx
 movzx   ecx, word, ptr, [rsi, +, 32]
 mov     word, ptr, [rsp, +, 32], cx
 movzx   ecx, word, ptr, [rsi, +, 30]
 mov     word, ptr, [rsp, +, 30], cx
 movzx   ecx, word, ptr, [rsi, +, 28]
 mov     word, ptr, [rsp, +, 28], cx
 movzx   ecx, word, ptr, [rsi, +, 26]
 mov     word, ptr, [rsp, +, 26], cx
 movzx   ecx, word, ptr, [rsi, +, 24]
 mov     word, ptr, [rsp, +, 24], cx
 movzx   ecx, word, ptr, [rsi, +, 22]
 mov     word, ptr, [rsp, +, 22], cx
 movzx   ecx, word, ptr, [rsi, +, 20]
 mov     word, ptr, [rsp, +, 20], cx
 movzx   ecx, word, ptr, [rsi, +, 18]
 mov     word, ptr, [rsp, +, 18], cx
 movzx   ecx, word, ptr, [rsi, +, 16]
 mov     word, ptr, [rsp, +, 16], cx
 movzx   ecx, word, ptr, [rsi, +, 14]
 mov     word, ptr, [rsp, +, 14], cx
 movzx   ecx, word, ptr, [rsi, +, 12]
 mov     word, ptr, [rsp, +, 12], cx
 movzx   ecx, word, ptr, [rsi, +, 10]
 mov     word, ptr, [rsp, +, 10], cx
 movzx   ecx, word, ptr, [rsi, +, 8]
 mov     word, ptr, [rsp, +, 8], cx
 movzx   ecx, word, ptr, [rsi, +, 6]
 mov     word, ptr, [rsp, +, 6], cx
 movzx   ecx, word, ptr, [rsi, +, 4]
 mov     word, ptr, [rsp, +, 4], cx
 movzx   ecx, word, ptr, [rsi, +, 2]
 mov     word, ptr, [rsp, +, 2], cx
 movzx   ecx, word, ptr, [rsi]
 mov     word, ptr, [rsp], cx
 jmp     .LBB4_7
.LBB4_2:
 mov     r11d, 64
 xor     r9d, r9d
 jmp     .LBB4_3
.LBB4_21:
 mov     rcx, r9
 and     rcx, -4
 xor     edi, edi
.LBB4_22:
 movzx   edx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 1]
 mov     byte, ptr, [rsp, +, rdi, +, 1], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 2]
 mov     byte, ptr, [rsp, +, rdi, +, 2], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 3]
 mov     byte, ptr, [rsp, +, rdi, +, 3], dl
 add     rdi, 4
 cmp     rcx, rdi
 jne     .LBB4_22
 mov     r11d, 64
 sub     r11, rdi
 test    r8, r8
 je      .LBB4_13
.LBB4_10:
 lea     r10, [rsp, +, rdi]
 add     rdi, rsi
 xor     edx, edx
.LBB4_11:
 movzx   ecx, byte, ptr, [rdi, +, rdx]
 mov     byte, ptr, [r10, +, rdx], cl
 add     rdx, 1
 cmp     r8, rdx
 jne     .LBB4_11
 sub     r11, rdx
.LBB4_13:
 cmp     r11, 8
 jb      .LBB4_14
.LBB4_3:
 mov     rcx, qword, ptr, [rsi, +, r9]
 mov     qword, ptr, [rsp, +, r9], rcx
 add     r11, -8
 add     r9, 8
 cmp     r11, 7
 ja      .LBB4_3
.LBB4_14:
 test    r11, r11
 je      .LBB4_7
 lea     r8, [r11, -, 1]
 mov     rdx, r11
 mov     rdi, r9
 and     rdx, 3
 je      .LBB4_18
 mov     rdi, r9
.LBB4_17:
 movzx   ecx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], cl
 add     rdi, 1
 add     rdx, -1
 jne     .LBB4_17
.LBB4_18:
 cmp     r8, 3
 jb      .LBB4_7
 add     r11, r9
.LBB4_20:
 movzx   ecx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 1]
 mov     byte, ptr, [rsp, +, rdi, +, 1], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 2]
 mov     byte, ptr, [rsp, +, rdi, +, 2], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 3]
 mov     byte, ptr, [rsp, +, rdi, +, 3], cl
 add     rdi, 4
 cmp     r11, rdi
 jne     .LBB4_20
.LBB4_7:
 movzx   ecx, word, ptr, [rsp]
 movzx   edx, word, ptr, [rsp, +, 2]
 movzx   esi, word, ptr, [rsp, +, 4]
 movzx   edi, word, ptr, [rsp, +, 6]
 movzx   r8d, word, ptr, [rsp, +, 8]
 movzx   r9d, word, ptr, [rsp, +, 10]
 movzx   r10d, word, ptr, [rsp, +, 12]
 movzx   r11d, word, ptr, [rsp, +, 14]
 movups  xmm0, xmmword, ptr, [rsp, +, 16]
 movups  xmm1, xmmword, ptr, [rsp, +, 32]
 movups  xmm2, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rax, +, 48], xmm2
 movups  xmmword, ptr, [rax, +, 32], xmm1
 movups  xmmword, ptr, [rax, +, 16], xmm0
 mov     word, ptr, [rax], cx
 mov     word, ptr, [rax, +, 2], dx
 mov     word, ptr, [rax, +, 4], si
 mov     word, ptr, [rax, +, 6], di
 mov     word, ptr, [rax, +, 8], r8w
 mov     word, ptr, [rax, +, 10], r9w
 mov     word, ptr, [rax, +, 12], r10w
 mov     word, ptr, [rax, +, 14], r11w
 #MEMBARRIER
 add     rsp, 64
 ret
asm_test::atomic_memcpy_load_align2::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 sub     rsp, 36
 mov     rax, rdi
 movzx   ecx, word, ptr, [rsi, +, 62]
 mov     word, ptr, [rsp, +, 34], cx
 movzx   ecx, word, ptr, [rsi, +, 60]
 mov     word, ptr, [rsp, +, 32], cx
 movzx   ecx, word, ptr, [rsi, +, 58]
 mov     word, ptr, [rsp, +, 30], cx
 movzx   ecx, word, ptr, [rsi, +, 56]
 mov     word, ptr, [rsp, +, 28], cx
 movzx   ecx, word, ptr, [rsi, +, 54]
 mov     word, ptr, [rsp, +, 26], cx
 movzx   ecx, word, ptr, [rsi, +, 52]
 mov     word, ptr, [rsp, +, 24], cx
 movzx   ecx, word, ptr, [rsi, +, 50]
 mov     word, ptr, [rsp, +, 22], cx
 movzx   ecx, word, ptr, [rsi, +, 48]
 mov     word, ptr, [rsp, +, 20], cx
 movzx   ecx, word, ptr, [rsi, +, 46]
 mov     word, ptr, [rsp, +, 18], cx
 movzx   ecx, word, ptr, [rsi, +, 44]
 mov     word, ptr, [rsp, +, 16], cx
 movzx   ecx, word, ptr, [rsi, +, 42]
 mov     word, ptr, [rsp, +, 14], cx
 movzx   ecx, word, ptr, [rsi, +, 40]
 mov     word, ptr, [rsp, +, 12], cx
 movzx   ecx, word, ptr, [rsi, +, 38]
 mov     word, ptr, [rsp, +, 10], cx
 movzx   ecx, word, ptr, [rsi, +, 36]
 mov     word, ptr, [rsp, +, 8], cx
 movzx   ecx, word, ptr, [rsi, +, 34]
 mov     word, ptr, [rsp, +, 6], cx
 movzx   ecx, word, ptr, [rsi, +, 32]
 mov     word, ptr, [rsp, +, 4], cx
 movzx   ecx, word, ptr, [rsi, +, 30]
 mov     word, ptr, [rsp, +, 2], cx
 movzx   ecx, word, ptr, [rsi, +, 28]
 mov     word, ptr, [rsp], cx
 movzx   r13d, word, ptr, [rsi, +, 26]
 movzx   r12d, word, ptr, [rsi, +, 24]
 movzx   r15d, word, ptr, [rsi, +, 22]
 movzx   r14d, word, ptr, [rsi, +, 20]
 movzx   ebp, word, ptr, [rsi, +, 18]
 movzx   ebx, word, ptr, [rsi, +, 16]
 movzx   r11d, word, ptr, [rsi, +, 14]
 movzx   r10d, word, ptr, [rsi, +, 12]
 movzx   r9d, word, ptr, [rsi, +, 10]
 movzx   r8d, word, ptr, [rsi, +, 8]
 movzx   edi, word, ptr, [rsi, +, 6]
 movzx   edx, word, ptr, [rsi, +, 4]
 movzx   ecx, word, ptr, [rsi]
 movzx   esi, word, ptr, [rsi, +, 2]
 mov     word, ptr, [rax], cx
 mov     word, ptr, [rax, +, 2], si
 mov     word, ptr, [rax, +, 4], dx
 mov     word, ptr, [rax, +, 6], di
 mov     word, ptr, [rax, +, 8], r8w
 mov     word, ptr, [rax, +, 10], r9w
 mov     word, ptr, [rax, +, 12], r10w
 mov     word, ptr, [rax, +, 14], r11w
 mov     word, ptr, [rax, +, 16], bx
 mov     word, ptr, [rax, +, 18], bp
 mov     word, ptr, [rax, +, 20], r14w
 mov     word, ptr, [rax, +, 22], r15w
 mov     word, ptr, [rax, +, 24], r12w
 mov     word, ptr, [rax, +, 26], r13w
 movzx   ecx, word, ptr, [rsp]
 mov     word, ptr, [rax, +, 28], cx
 movzx   ecx, word, ptr, [rsp, +, 2]
 mov     word, ptr, [rax, +, 30], cx
 movzx   ecx, word, ptr, [rsp, +, 4]
 mov     word, ptr, [rax, +, 32], cx
 movzx   ecx, word, ptr, [rsp, +, 6]
 mov     word, ptr, [rax, +, 34], cx
 movzx   ecx, word, ptr, [rsp, +, 8]
 mov     word, ptr, [rax, +, 36], cx
 movzx   ecx, word, ptr, [rsp, +, 10]
 mov     word, ptr, [rax, +, 38], cx
 movzx   ecx, word, ptr, [rsp, +, 12]
 mov     word, ptr, [rax, +, 40], cx
 movzx   ecx, word, ptr, [rsp, +, 14]
 mov     word, ptr, [rax, +, 42], cx
 movzx   ecx, word, ptr, [rsp, +, 16]
 mov     word, ptr, [rax, +, 44], cx
 movzx   ecx, word, ptr, [rsp, +, 18]
 mov     word, ptr, [rax, +, 46], cx
 movzx   ecx, word, ptr, [rsp, +, 20]
 mov     word, ptr, [rax, +, 48], cx
 movzx   ecx, word, ptr, [rsp, +, 22]
 mov     word, ptr, [rax, +, 50], cx
 movzx   ecx, word, ptr, [rsp, +, 24]
 mov     word, ptr, [rax, +, 52], cx
 movzx   ecx, word, ptr, [rsp, +, 26]
 mov     word, ptr, [rax, +, 54], cx
 movzx   ecx, word, ptr, [rsp, +, 28]
 mov     word, ptr, [rax, +, 56], cx
 movzx   ecx, word, ptr, [rsp, +, 30]
 mov     word, ptr, [rax, +, 58], cx
 movzx   ecx, word, ptr, [rsp, +, 32]
 mov     word, ptr, [rax, +, 60], cx
 movzx   ecx, word, ptr, [rsp, +, 34]
 mov     word, ptr, [rax, +, 62], cx
 #MEMBARRIER
 add     rsp, 36
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
