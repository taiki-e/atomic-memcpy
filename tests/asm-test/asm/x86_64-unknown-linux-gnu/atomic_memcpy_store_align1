asm_test::atomic_memcpy_store_align1::release:
 sub     rsp, 136
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 112], xmm3
 movaps  xmmword, ptr, [rsp, +, 96], xmm2
 movaps  xmmword, ptr, [rsp, +, 80], xmm1
 movaps  xmmword, ptr, [rsp, +, 64], xmm0
 #MEMBARRIER
 movaps  xmm0, xmmword, ptr, [rsp, +, 64]
 movaps  xmm1, xmmword, ptr, [rsp, +, 80]
 movaps  xmm2, xmmword, ptr, [rsp, +, 96]
 movaps  xmm3, xmmword, ptr, [rsp, +, 112]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 lea     rcx, [rdi, +, 7]
 and     rcx, -8
 mov     r11, rcx
 sub     r11, rdi
 cmp     r11, 65
 jae     .LBB2_1
 test    r11, r11
 je      .LBB2_4
 mov     rdx, rdi
 not     rdx
 add     rcx, rdx
 mov     r8d, r11d
 and     r8d, 3
 cmp     rcx, 3
 jae     .LBB2_21
 mov     esi, 64
 xor     ecx, ecx
 test    r8, r8
 jne     .LBB2_10
 jmp     .LBB2_13
.LBB2_1:
 mov     al, byte, ptr, [rsp]
 mov     byte, ptr, [rdi], al
 mov     al, byte, ptr, [rsp, +, 1]
 mov     byte, ptr, [rdi, +, 1], al
 mov     al, byte, ptr, [rsp, +, 2]
 mov     byte, ptr, [rdi, +, 2], al
 mov     al, byte, ptr, [rsp, +, 3]
 mov     byte, ptr, [rdi, +, 3], al
 mov     al, byte, ptr, [rsp, +, 4]
 mov     byte, ptr, [rdi, +, 4], al
 mov     al, byte, ptr, [rsp, +, 5]
 mov     byte, ptr, [rdi, +, 5], al
 mov     al, byte, ptr, [rsp, +, 6]
 mov     byte, ptr, [rdi, +, 6], al
 mov     al, byte, ptr, [rsp, +, 7]
 mov     byte, ptr, [rdi, +, 7], al
 mov     al, byte, ptr, [rsp, +, 8]
 mov     byte, ptr, [rdi, +, 8], al
 mov     al, byte, ptr, [rsp, +, 9]
 mov     byte, ptr, [rdi, +, 9], al
 mov     al, byte, ptr, [rsp, +, 10]
 mov     byte, ptr, [rdi, +, 10], al
 mov     al, byte, ptr, [rsp, +, 11]
 mov     byte, ptr, [rdi, +, 11], al
 mov     al, byte, ptr, [rsp, +, 12]
 mov     byte, ptr, [rdi, +, 12], al
 mov     al, byte, ptr, [rsp, +, 13]
 mov     byte, ptr, [rdi, +, 13], al
 mov     al, byte, ptr, [rsp, +, 14]
 mov     byte, ptr, [rdi, +, 14], al
 mov     al, byte, ptr, [rsp, +, 15]
 mov     byte, ptr, [rdi, +, 15], al
 mov     al, byte, ptr, [rsp, +, 16]
 mov     byte, ptr, [rdi, +, 16], al
 mov     al, byte, ptr, [rsp, +, 17]
 mov     byte, ptr, [rdi, +, 17], al
 mov     al, byte, ptr, [rsp, +, 18]
 mov     byte, ptr, [rdi, +, 18], al
 mov     al, byte, ptr, [rsp, +, 19]
 mov     byte, ptr, [rdi, +, 19], al
 mov     al, byte, ptr, [rsp, +, 20]
 mov     byte, ptr, [rdi, +, 20], al
 mov     al, byte, ptr, [rsp, +, 21]
 mov     byte, ptr, [rdi, +, 21], al
 mov     al, byte, ptr, [rsp, +, 22]
 mov     byte, ptr, [rdi, +, 22], al
 mov     al, byte, ptr, [rsp, +, 23]
 mov     byte, ptr, [rdi, +, 23], al
 mov     al, byte, ptr, [rsp, +, 24]
 mov     byte, ptr, [rdi, +, 24], al
 mov     al, byte, ptr, [rsp, +, 25]
 mov     byte, ptr, [rdi, +, 25], al
 mov     al, byte, ptr, [rsp, +, 26]
 mov     byte, ptr, [rdi, +, 26], al
 mov     al, byte, ptr, [rsp, +, 27]
 mov     byte, ptr, [rdi, +, 27], al
 mov     al, byte, ptr, [rsp, +, 28]
 mov     byte, ptr, [rdi, +, 28], al
 mov     al, byte, ptr, [rsp, +, 29]
 mov     byte, ptr, [rdi, +, 29], al
 mov     al, byte, ptr, [rsp, +, 30]
 mov     byte, ptr, [rdi, +, 30], al
 mov     al, byte, ptr, [rsp, +, 31]
 mov     byte, ptr, [rdi, +, 31], al
 mov     al, byte, ptr, [rsp, +, 32]
 mov     byte, ptr, [rdi, +, 32], al
 mov     al, byte, ptr, [rsp, +, 33]
 mov     byte, ptr, [rdi, +, 33], al
 mov     al, byte, ptr, [rsp, +, 34]
 mov     byte, ptr, [rdi, +, 34], al
 mov     al, byte, ptr, [rsp, +, 35]
 mov     byte, ptr, [rdi, +, 35], al
 mov     al, byte, ptr, [rsp, +, 36]
 mov     byte, ptr, [rdi, +, 36], al
 mov     al, byte, ptr, [rsp, +, 37]
 mov     byte, ptr, [rdi, +, 37], al
 mov     al, byte, ptr, [rsp, +, 38]
 mov     byte, ptr, [rdi, +, 38], al
 mov     al, byte, ptr, [rsp, +, 39]
 mov     byte, ptr, [rdi, +, 39], al
 mov     al, byte, ptr, [rsp, +, 40]
 mov     byte, ptr, [rdi, +, 40], al
 mov     al, byte, ptr, [rsp, +, 41]
 mov     byte, ptr, [rdi, +, 41], al
 mov     al, byte, ptr, [rsp, +, 42]
 mov     byte, ptr, [rdi, +, 42], al
 mov     al, byte, ptr, [rsp, +, 43]
 mov     byte, ptr, [rdi, +, 43], al
 mov     al, byte, ptr, [rsp, +, 44]
 mov     byte, ptr, [rdi, +, 44], al
 mov     al, byte, ptr, [rsp, +, 45]
 mov     byte, ptr, [rdi, +, 45], al
 mov     al, byte, ptr, [rsp, +, 46]
 mov     byte, ptr, [rdi, +, 46], al
 mov     al, byte, ptr, [rsp, +, 47]
 mov     byte, ptr, [rdi, +, 47], al
 mov     al, byte, ptr, [rsp, +, 48]
 mov     byte, ptr, [rdi, +, 48], al
 mov     al, byte, ptr, [rsp, +, 49]
 mov     byte, ptr, [rdi, +, 49], al
 mov     al, byte, ptr, [rsp, +, 50]
 mov     byte, ptr, [rdi, +, 50], al
 mov     al, byte, ptr, [rsp, +, 51]
 mov     byte, ptr, [rdi, +, 51], al
 mov     al, byte, ptr, [rsp, +, 52]
 mov     byte, ptr, [rdi, +, 52], al
 mov     al, byte, ptr, [rsp, +, 53]
 mov     byte, ptr, [rdi, +, 53], al
 mov     al, byte, ptr, [rsp, +, 54]
 mov     byte, ptr, [rdi, +, 54], al
 mov     al, byte, ptr, [rsp, +, 55]
 mov     byte, ptr, [rdi, +, 55], al
 mov     al, byte, ptr, [rsp, +, 56]
 mov     byte, ptr, [rdi, +, 56], al
 mov     al, byte, ptr, [rsp, +, 57]
 mov     byte, ptr, [rdi, +, 57], al
 mov     al, byte, ptr, [rsp, +, 58]
 mov     byte, ptr, [rdi, +, 58], al
 mov     al, byte, ptr, [rsp, +, 59]
 mov     byte, ptr, [rdi, +, 59], al
 mov     al, byte, ptr, [rsp, +, 60]
 mov     byte, ptr, [rdi, +, 60], al
 mov     al, byte, ptr, [rsp, +, 61]
 mov     byte, ptr, [rdi, +, 61], al
 mov     al, byte, ptr, [rsp, +, 62]
 mov     byte, ptr, [rdi, +, 62], al
 mov     al, byte, ptr, [rsp, +, 63]
 mov     byte, ptr, [rdi, +, 63], al
 jmp     .LBB2_2
.LBB2_4:
 mov     esi, 64
 xor     r11d, r11d
 jmp     .LBB2_5
.LBB2_21:
 mov     rsi, r11
 and     rsi, -4
 xor     ecx, ecx
.LBB2_22:
 movzx   edx, byte, ptr, [rsp, +, rcx]
 mov     byte, ptr, [rdi, +, rcx], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 1]
 mov     byte, ptr, [rdi, +, rcx, +, 1], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 2]
 mov     byte, ptr, [rdi, +, rcx, +, 2], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 3]
 mov     byte, ptr, [rdi, +, rcx, +, 3], dl
 add     rcx, 4
 cmp     rsi, rcx
 jne     .LBB2_22
 mov     esi, 64
 sub     rsi, rcx
 test    r8, r8
 je      .LBB2_13
.LBB2_10:
 lea     r9, [rdi, +, rcx]
 lea     r10, [rsp, +, rcx]
 xor     ecx, ecx
.LBB2_11:
 movzx   edx, byte, ptr, [r10, +, rcx]
 mov     byte, ptr, [r9, +, rcx], dl
 add     rcx, 1
 cmp     r8, rcx
 jne     .LBB2_11
 sub     rsi, rcx
.LBB2_13:
 cmp     rsi, 8
 jb      .LBB2_14
.LBB2_5:
 mov     rax, qword, ptr, [rsp, +, r11]
 mov     qword, ptr, [rdi, +, r11], rax
 add     rsi, -8
 add     r11, 8
 cmp     rsi, 7
 ja      .LBB2_5
.LBB2_14:
 test    rsi, rsi
 je      .LBB2_2
 lea     r8, [rsi, -, 1]
 mov     rcx, rsi
 mov     rdx, r11
 and     rcx, 3
 je      .LBB2_18
 mov     rdx, r11
.LBB2_17:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 add     rdx, 1
 add     rcx, -1
 jne     .LBB2_17
.LBB2_18:
 cmp     r8, 3
 jb      .LBB2_2
 add     rsi, r11
.LBB2_20:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 1]
 mov     byte, ptr, [rdi, +, rdx, +, 1], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 2]
 mov     byte, ptr, [rdi, +, rdx, +, 2], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 3]
 mov     byte, ptr, [rdi, +, rdx, +, 3], al
 add     rdx, 4
 cmp     rsi, rdx
 jne     .LBB2_20
.LBB2_2:
 add     rsp, 136
 ret
asm_test::atomic_memcpy_store_align1::write_volatile_release_fence:
 sub     rsp, 72
 #MEMBARRIER
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rdi, +, 48], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 32]
 movups  xmmword, ptr, [rdi, +, 32], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 16]
 movups  xmmword, ptr, [rdi, +, 16], xmm0
 movaps  xmm0, xmmword, ptr, [rsp]
 movups  xmmword, ptr, [rdi], xmm0
 add     rsp, 72
 ret
