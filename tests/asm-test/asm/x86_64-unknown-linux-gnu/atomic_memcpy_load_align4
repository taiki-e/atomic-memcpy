asm_test::atomic_memcpy_load_align4::acquire:
 sub     rsp, 64
 mov     rax, rdi
 lea     rdx, [rsi, +, 7]
 and     rdx, -8
 mov     rcx, rdx
 sub     rcx, rsi
 cmp     rcx, 65
 jb      .LBB8_2
 mov     ecx, dword, ptr, [rsi, +, 60]
 mov     dword, ptr, [rsp, +, 60], ecx
 mov     ecx, dword, ptr, [rsi, +, 56]
 mov     dword, ptr, [rsp, +, 56], ecx
 mov     ecx, dword, ptr, [rsi, +, 52]
 mov     dword, ptr, [rsp, +, 52], ecx
 mov     ecx, dword, ptr, [rsi, +, 48]
 mov     dword, ptr, [rsp, +, 48], ecx
 mov     ecx, dword, ptr, [rsi, +, 44]
 mov     dword, ptr, [rsp, +, 44], ecx
 mov     ecx, dword, ptr, [rsi, +, 40]
 mov     dword, ptr, [rsp, +, 40], ecx
 mov     ecx, dword, ptr, [rsi, +, 36]
 mov     dword, ptr, [rsp, +, 36], ecx
 mov     ecx, dword, ptr, [rsi, +, 32]
 mov     dword, ptr, [rsp, +, 32], ecx
 mov     ecx, dword, ptr, [rsi, +, 28]
 mov     dword, ptr, [rsp, +, 28], ecx
 mov     ecx, dword, ptr, [rsi, +, 24]
 mov     dword, ptr, [rsp, +, 24], ecx
 mov     ecx, dword, ptr, [rsi, +, 20]
 mov     dword, ptr, [rsp, +, 20], ecx
 mov     ecx, dword, ptr, [rsi, +, 16]
 mov     dword, ptr, [rsp, +, 16], ecx
 mov     ecx, dword, ptr, [rsi, +, 12]
 mov     dword, ptr, [rsp, +, 12], ecx
 mov     ecx, dword, ptr, [rsi, +, 8]
 mov     dword, ptr, [rsp, +, 8], ecx
 mov     ecx, dword, ptr, [rsi, +, 4]
 mov     dword, ptr, [rsp, +, 4], ecx
 mov     ecx, dword, ptr, [rsi]
 mov     dword, ptr, [rsp], ecx
 jmp     .LBB8_22
.LBB8_2:
 test    rcx, rcx
 je      .LBB8_3
 mov     rdi, rsi
 not     rdi
 add     rdx, rdi
 mov     r8d, ecx
 and     r8d, 3
 cmp     rdx, 3
 jae     .LBB8_6
 mov     r11d, 64
 xor     r10d, r10d
 test    r8, r8
 jne     .LBB8_10
 jmp     .LBB8_13
.LBB8_3:
 mov     r11d, 64
 jmp     .LBB8_14
.LBB8_6:
 mov     rdi, rcx
 and     rdi, -4
 xor     r10d, r10d
.LBB8_7:
 movzx   edx, byte, ptr, [rsi, +, r10]
 mov     byte, ptr, [rsp, +, r10], dl
 movzx   edx, byte, ptr, [rsi, +, r10, +, 1]
 mov     byte, ptr, [rsp, +, r10, +, 1], dl
 movzx   edx, byte, ptr, [rsi, +, r10, +, 2]
 mov     byte, ptr, [rsp, +, r10, +, 2], dl
 movzx   edx, byte, ptr, [rsi, +, r10, +, 3]
 mov     byte, ptr, [rsp, +, r10, +, 3], dl
 add     r10, 4
 cmp     rdi, r10
 jne     .LBB8_7
 mov     r11d, 64
 sub     r11, r10
 test    r8, r8
 je      .LBB8_13
.LBB8_10:
 lea     r9, [rsp, +, r10]
 add     r10, rsi
 xor     edi, edi
.LBB8_11:
 movzx   edx, byte, ptr, [r10, +, rdi]
 mov     byte, ptr, [r9, +, rdi], dl
 add     rdi, 1
 cmp     r8, rdi
 jne     .LBB8_11
 sub     r11, rdi
.LBB8_13:
 cmp     r11, 8
 jb      .LBB8_15
.LBB8_14:
 mov     rdx, qword, ptr, [rsi, +, rcx]
 mov     qword, ptr, [rsp, +, rcx], rdx
 add     r11, -8
 add     rcx, 8
 cmp     r11, 7
 ja      .LBB8_14
.LBB8_15:
 test    r11, r11
 je      .LBB8_22
 lea     rdx, [r11, -, 1]
 mov     r8d, r11d
 and     r8d, 3
 cmp     rdx, 3
 jb      .LBB8_19
 and     r11, -4
.LBB8_18:
 movzx   edx, byte, ptr, [rsi, +, rcx]
 mov     byte, ptr, [rsp, +, rcx], dl
 movzx   edx, byte, ptr, [rsi, +, rcx, +, 1]
 mov     byte, ptr, [rsp, +, rcx, +, 1], dl
 movzx   edx, byte, ptr, [rsi, +, rcx, +, 2]
 mov     byte, ptr, [rsp, +, rcx, +, 2], dl
 movzx   edx, byte, ptr, [rsi, +, rcx, +, 3]
 mov     byte, ptr, [rsp, +, rcx, +, 3], dl
 add     rcx, 4
 add     r11, -4
 jne     .LBB8_18
.LBB8_19:
 test    r8, r8
 je      .LBB8_22
 lea     rdi, [rsp, +, rcx]
 add     rsi, rcx
 xor     ecx, ecx
.LBB8_21:
 movzx   edx, byte, ptr, [rsi, +, rcx]
 mov     byte, ptr, [rdi, +, rcx], dl
 add     rcx, 1
 cmp     r8, rcx
 jne     .LBB8_21
.LBB8_22:
 mov     r8d, dword, ptr, [rsp]
 mov     r9d, dword, ptr, [rsp, +, 4]
 mov     r10d, dword, ptr, [rsp, +, 8]
 mov     r11d, dword, ptr, [rsp, +, 12]
 mov     ecx, dword, ptr, [rsp, +, 16]
 mov     edx, dword, ptr, [rsp, +, 20]
 mov     esi, dword, ptr, [rsp, +, 24]
 mov     edi, dword, ptr, [rsp, +, 28]
 movups  xmm0, xmmword, ptr, [rsp, +, 32]
 movups  xmm1, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rax, +, 48], xmm1
 movups  xmmword, ptr, [rax, +, 32], xmm0
 mov     dword, ptr, [rax, +, 16], ecx
 mov     dword, ptr, [rax, +, 20], edx
 mov     dword, ptr, [rax, +, 24], esi
 mov     dword, ptr, [rax, +, 28], edi
 mov     dword, ptr, [rax], r8d
 mov     dword, ptr, [rax, +, 4], r9d
 mov     dword, ptr, [rax, +, 8], r10d
 mov     dword, ptr, [rax, +, 12], r11d
 #MEMBARRIER
 add     rsp, 64
 ret
asm_test::atomic_memcpy_load_align4::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 push    rax
 mov     rax, rdi
 mov     ecx, dword, ptr, [rsi, +, 60]
 mov     dword, ptr, [rsp, +, 4], ecx
 mov     ecx, dword, ptr, [rsi, +, 56]
 mov     dword, ptr, [rsp], ecx
 mov     r10d, dword, ptr, [rsi, +, 52]
 mov     r11d, dword, ptr, [rsi, +, 48]
 mov     r14d, dword, ptr, [rsi, +, 44]
 mov     r15d, dword, ptr, [rsi, +, 40]
 mov     r12d, dword, ptr, [rsi, +, 36]
 mov     r13d, dword, ptr, [rsi, +, 32]
 mov     ebp, dword, ptr, [rsi, +, 28]
 mov     r9d, dword, ptr, [rsi, +, 24]
 mov     r8d, dword, ptr, [rsi, +, 20]
 mov     edi, dword, ptr, [rsi, +, 16]
 mov     ebx, dword, ptr, [rsi, +, 12]
 mov     edx, dword, ptr, [rsi, +, 8]
 mov     ecx, dword, ptr, [rsi]
 mov     esi, dword, ptr, [rsi, +, 4]
 mov     dword, ptr, [rax], ecx
 mov     dword, ptr, [rax, +, 4], esi
 mov     dword, ptr, [rax, +, 8], edx
 mov     dword, ptr, [rax, +, 12], ebx
 mov     dword, ptr, [rax, +, 16], edi
 mov     dword, ptr, [rax, +, 20], r8d
 mov     dword, ptr, [rax, +, 24], r9d
 mov     dword, ptr, [rax, +, 28], ebp
 mov     dword, ptr, [rax, +, 32], r13d
 mov     dword, ptr, [rax, +, 36], r12d
 mov     dword, ptr, [rax, +, 40], r15d
 mov     dword, ptr, [rax, +, 44], r14d
 mov     dword, ptr, [rax, +, 48], r11d
 mov     dword, ptr, [rax, +, 52], r10d
 mov     ecx, dword, ptr, [rsp]
 mov     dword, ptr, [rax, +, 56], ecx
 mov     ecx, dword, ptr, [rsp, +, 4]
 mov     dword, ptr, [rax, +, 60], ecx
 #MEMBARRIER
 add     rsp, 8
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
