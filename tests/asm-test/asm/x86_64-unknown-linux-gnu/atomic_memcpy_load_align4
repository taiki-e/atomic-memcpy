asm_test::atomic_memcpy_load_align4::acquire:
 sub     rsp, 64
 mov     rax, rdi
 lea     rcx, [rsi, +, 60]
 lea     rdx, [rsp, +, 60]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 56]
 lea     rdx, [rsp, +, 56]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 52]
 lea     rdx, [rsp, +, 52]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 48]
 lea     rdx, [rsp, +, 48]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 44]
 lea     rdx, [rsp, +, 44]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 40]
 lea     rdx, [rsp, +, 40]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 36]
 lea     rdx, [rsp, +, 36]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 32]
 lea     rdx, [rsp, +, 32]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 28]
 lea     rdx, [rsp, +, 28]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 24]
 lea     rdx, [rsp, +, 24]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 20]
 lea     rdx, [rsp, +, 20]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 16]
 lea     rdx, [rsp, +, 16]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 12]
 lea     rdx, [rsp, +, 12]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 8]
 lea     rdx, [rsp, +, 8]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 lea     rcx, [rsi, +, 4]
 lea     rdx, [rsp, +, 4]
 #APP
 mov     ecx, dword, ptr, [rcx]
 mov     dword, ptr, [rdx], ecx
 #NO_APP
 mov     rcx, rsp
 #APP
 mov     edx, dword, ptr, [rsi]
 mov     dword, ptr, [rcx], edx
 #NO_APP
 movups  xmm0, xmmword, ptr, [rsp]
 movups  xmm1, xmmword, ptr, [rsp, +, 16]
 movups  xmm2, xmmword, ptr, [rsp, +, 32]
 movups  xmm3, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rdi], xmm0
 movups  xmmword, ptr, [rdi, +, 16], xmm1
 movups  xmmword, ptr, [rdi, +, 32], xmm2
 movups  xmmword, ptr, [rdi, +, 48], xmm3
 #MEMBARRIER
 add     rsp, 64
 ret
asm_test::atomic_memcpy_load_align4::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 push    rax
 mov     rax, rdi
 mov     ecx, dword, ptr, [rsi, +, 60]
 mov     dword, ptr, [rsp, +, 4], ecx
 mov     ecx, dword, ptr, [rsi, +, 56]
 mov     dword, ptr, [rsp], ecx
 mov     r10d, dword, ptr, [rsi, +, 52]
 mov     r11d, dword, ptr, [rsi, +, 48]
 mov     r14d, dword, ptr, [rsi, +, 44]
 mov     r15d, dword, ptr, [rsi, +, 40]
 mov     r12d, dword, ptr, [rsi, +, 36]
 mov     r13d, dword, ptr, [rsi, +, 32]
 mov     ebp, dword, ptr, [rsi, +, 28]
 mov     r9d, dword, ptr, [rsi, +, 24]
 mov     r8d, dword, ptr, [rsi, +, 20]
 mov     edi, dword, ptr, [rsi, +, 16]
 mov     ebx, dword, ptr, [rsi, +, 12]
 mov     edx, dword, ptr, [rsi, +, 8]
 mov     ecx, dword, ptr, [rsi]
 mov     esi, dword, ptr, [rsi, +, 4]
 mov     dword, ptr, [rax], ecx
 mov     dword, ptr, [rax, +, 4], esi
 mov     dword, ptr, [rax, +, 8], edx
 mov     dword, ptr, [rax, +, 12], ebx
 mov     dword, ptr, [rax, +, 16], edi
 mov     dword, ptr, [rax, +, 20], r8d
 mov     dword, ptr, [rax, +, 24], r9d
 mov     dword, ptr, [rax, +, 28], ebp
 mov     dword, ptr, [rax, +, 32], r13d
 mov     dword, ptr, [rax, +, 36], r12d
 mov     dword, ptr, [rax, +, 40], r15d
 mov     dword, ptr, [rax, +, 44], r14d
 mov     dword, ptr, [rax, +, 48], r11d
 mov     dword, ptr, [rax, +, 52], r10d
 mov     ecx, dword, ptr, [rsp]
 mov     dword, ptr, [rax, +, 56], ecx
 mov     ecx, dword, ptr, [rsp, +, 4]
 mov     dword, ptr, [rax, +, 60], ecx
 #MEMBARRIER
 add     rsp, 8
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
