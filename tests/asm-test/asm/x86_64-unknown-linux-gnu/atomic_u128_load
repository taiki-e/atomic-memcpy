asm_test::atomic_u128_load::unordered:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 pop     rbx
 ret
asm_test::atomic_u128_load::relaxed:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 pop     rbx
 ret
asm_test::atomic_u128_load::unordered_acquire_fence:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 #MEMBARRIER
 pop     rbx
 ret
asm_test::atomic_u128_load::relaxed_acquire_fence:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 #MEMBARRIER
 pop     rbx
 ret
asm_test::atomic_u128_load::acquire:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 pop     rbx
 ret
asm_test::atomic_u128_load::unordered_seqcst_fence:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 mfence
 pop     rbx
 ret
asm_test::atomic_u128_load::relaxed_seqcst_fence:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 mfence
 pop     rbx
 ret
asm_test::atomic_u128_load::seqcst:
 push    rbx
 xor     eax, eax
 xor     edx, edx
 xor     ecx, ecx
 xor     ebx, ebx
 lock    cmpxchg16b, xmmword, ptr, [rdi]
 pop     rbx
 ret
