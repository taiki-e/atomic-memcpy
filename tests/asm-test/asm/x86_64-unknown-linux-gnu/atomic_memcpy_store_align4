asm_test::atomic_memcpy_store_align4::release:
 sub     rsp, 136
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 112], xmm3
 movaps  xmmword, ptr, [rsp, +, 96], xmm2
 movaps  xmmword, ptr, [rsp, +, 80], xmm1
 movaps  xmmword, ptr, [rsp, +, 64], xmm0
 #MEMBARRIER
 movaps  xmm0, xmmword, ptr, [rsp, +, 64]
 movaps  xmm1, xmmword, ptr, [rsp, +, 80]
 movaps  xmm2, xmmword, ptr, [rsp, +, 96]
 movaps  xmm3, xmmword, ptr, [rsp, +, 112]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 lea     rax, [rdi, +, 7]
 and     rax, -8
 mov     rcx, rax
 sub     rcx, rdi
 cmp     rcx, 65
 jae     .LBB10_1
 cmp     rax, rdi
 jne     .LBB10_6
 mov     esi, 64
 xor     r11d, r11d
 jmp     .LBB10_5
.LBB10_1:
 mov     eax, dword, ptr, [rsp, +, 60]
 mov     dword, ptr, [rdi, +, 60], eax
 mov     eax, dword, ptr, [rsp, +, 56]
 mov     dword, ptr, [rdi, +, 56], eax
 mov     eax, dword, ptr, [rsp, +, 52]
 mov     dword, ptr, [rdi, +, 52], eax
 mov     eax, dword, ptr, [rsp, +, 48]
 mov     dword, ptr, [rdi, +, 48], eax
 mov     eax, dword, ptr, [rsp, +, 44]
 mov     dword, ptr, [rdi, +, 44], eax
 mov     eax, dword, ptr, [rsp, +, 40]
 mov     dword, ptr, [rdi, +, 40], eax
 mov     eax, dword, ptr, [rsp, +, 36]
 mov     dword, ptr, [rdi, +, 36], eax
 mov     eax, dword, ptr, [rsp, +, 32]
 mov     dword, ptr, [rdi, +, 32], eax
 mov     eax, dword, ptr, [rsp, +, 28]
 mov     dword, ptr, [rdi, +, 28], eax
 mov     eax, dword, ptr, [rsp, +, 24]
 mov     dword, ptr, [rdi, +, 24], eax
 mov     eax, dword, ptr, [rsp, +, 20]
 mov     dword, ptr, [rdi, +, 20], eax
 mov     eax, dword, ptr, [rsp, +, 16]
 mov     dword, ptr, [rdi, +, 16], eax
 mov     eax, dword, ptr, [rsp, +, 12]
 mov     dword, ptr, [rdi, +, 12], eax
 mov     eax, dword, ptr, [rsp, +, 8]
 mov     dword, ptr, [rdi, +, 8], eax
 mov     eax, dword, ptr, [rsp, +, 4]
 mov     dword, ptr, [rdi, +, 4], eax
 mov     eax, dword, ptr, [rsp]
 mov     dword, ptr, [rdi], eax
 jmp     .LBB10_2
.LBB10_6:
 cmp     rcx, 2
 mov     r11d, 1
 cmovae  r11, rcx
 lea     rcx, [r11, -, 1]
 mov     r8d, r11d
 and     r8d, 3
 cmp     rcx, 3
 jae     .LBB10_21
 mov     esi, 64
 xor     ecx, ecx
 test    r8, r8
 jne     .LBB10_10
 jmp     .LBB10_13
.LBB10_21:
 mov     rsi, r11
 and     rsi, -4
 xor     ecx, ecx
.LBB10_22:
 movzx   edx, byte, ptr, [rsp, +, rcx]
 mov     byte, ptr, [rdi, +, rcx], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 1]
 mov     byte, ptr, [rdi, +, rcx, +, 1], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 2]
 mov     byte, ptr, [rdi, +, rcx, +, 2], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 3]
 mov     byte, ptr, [rdi, +, rcx, +, 3], dl
 add     rcx, 4
 cmp     rsi, rcx
 jne     .LBB10_22
 mov     esi, 64
 sub     rsi, rcx
 test    r8, r8
 je      .LBB10_13
.LBB10_10:
 lea     r9, [rdi, +, rcx]
 lea     r10, [rsp, +, rcx]
 xor     ecx, ecx
.LBB10_11:
 movzx   edx, byte, ptr, [r10, +, rcx]
 mov     byte, ptr, [r9, +, rcx], dl
 inc     rcx
 cmp     r8, rcx
 jne     .LBB10_11
 sub     rsi, rcx
.LBB10_13:
 cmp     rsi, 8
 jb      .LBB10_14
.LBB10_5:
 mov     rax, qword, ptr, [rsp, +, r11]
 mov     qword, ptr, [rdi, +, r11], rax
 add     rsi, -8
 add     r11, 8
 cmp     rsi, 7
 ja      .LBB10_5
.LBB10_14:
 test    rsi, rsi
 je      .LBB10_2
 lea     r8, [rsi, -, 1]
 mov     rcx, rsi
 mov     rdx, r11
 and     rcx, 3
 je      .LBB10_18
 mov     rdx, r11
.LBB10_17:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 inc     rdx
 dec     rcx
 jne     .LBB10_17
.LBB10_18:
 cmp     r8, 3
 jb      .LBB10_2
 add     rsi, r11
.LBB10_20:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 1]
 mov     byte, ptr, [rdi, +, rdx, +, 1], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 2]
 mov     byte, ptr, [rdi, +, rdx, +, 2], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 3]
 mov     byte, ptr, [rdi, +, rdx, +, 3], al
 add     rdx, 4
 cmp     rsi, rdx
 jne     .LBB10_20
.LBB10_2:
 add     rsp, 136
 ret
asm_test::atomic_memcpy_store_align4::write_volatile_release_fence:
 sub     rsp, 72
 #MEMBARRIER
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rdi, +, 48], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 32]
 movups  xmmword, ptr, [rdi, +, 32], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 16]
 movups  xmmword, ptr, [rdi, +, 16], xmm0
 movaps  xmm0, xmmword, ptr, [rsp]
 movups  xmmword, ptr, [rdi], xmm0
 add     rsp, 72
 ret
