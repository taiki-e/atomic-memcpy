asm_test::atomic_memcpy_store_align2::release:
 sub     rsp, 136
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 112], xmm3
 movaps  xmmword, ptr, [rsp, +, 96], xmm2
 movaps  xmmword, ptr, [rsp, +, 80], xmm1
 movaps  xmmword, ptr, [rsp, +, 64], xmm0
 #MEMBARRIER
 movaps  xmm0, xmmword, ptr, [rsp, +, 64]
 movaps  xmm1, xmmword, ptr, [rsp, +, 80]
 movaps  xmm2, xmmword, ptr, [rsp, +, 96]
 movaps  xmm3, xmmword, ptr, [rsp, +, 112]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 lea     rax, [rdi, +, 7]
 and     rax, -8
 mov     rcx, rax
 sub     rcx, rdi
 cmp     rcx, 65
 jae     .LBB6_1
 cmp     rax, rdi
 jne     .LBB6_6
 mov     esi, 64
 xor     r11d, r11d
 jmp     .LBB6_5
.LBB6_1:
 movzx   eax, word, ptr, [rsp, +, 62]
 mov     word, ptr, [rdi, +, 62], ax
 movzx   eax, word, ptr, [rsp, +, 60]
 mov     word, ptr, [rdi, +, 60], ax
 movzx   eax, word, ptr, [rsp, +, 58]
 mov     word, ptr, [rdi, +, 58], ax
 movzx   eax, word, ptr, [rsp, +, 56]
 mov     word, ptr, [rdi, +, 56], ax
 movzx   eax, word, ptr, [rsp, +, 54]
 mov     word, ptr, [rdi, +, 54], ax
 movzx   eax, word, ptr, [rsp, +, 52]
 mov     word, ptr, [rdi, +, 52], ax
 movzx   eax, word, ptr, [rsp, +, 50]
 mov     word, ptr, [rdi, +, 50], ax
 movzx   eax, word, ptr, [rsp, +, 48]
 mov     word, ptr, [rdi, +, 48], ax
 movzx   eax, word, ptr, [rsp, +, 46]
 mov     word, ptr, [rdi, +, 46], ax
 movzx   eax, word, ptr, [rsp, +, 44]
 mov     word, ptr, [rdi, +, 44], ax
 movzx   eax, word, ptr, [rsp, +, 42]
 mov     word, ptr, [rdi, +, 42], ax
 movzx   eax, word, ptr, [rsp, +, 40]
 mov     word, ptr, [rdi, +, 40], ax
 movzx   eax, word, ptr, [rsp, +, 38]
 mov     word, ptr, [rdi, +, 38], ax
 movzx   eax, word, ptr, [rsp, +, 36]
 mov     word, ptr, [rdi, +, 36], ax
 movzx   eax, word, ptr, [rsp, +, 34]
 mov     word, ptr, [rdi, +, 34], ax
 movzx   eax, word, ptr, [rsp, +, 32]
 mov     word, ptr, [rdi, +, 32], ax
 movzx   eax, word, ptr, [rsp, +, 30]
 mov     word, ptr, [rdi, +, 30], ax
 movzx   eax, word, ptr, [rsp, +, 28]
 mov     word, ptr, [rdi, +, 28], ax
 movzx   eax, word, ptr, [rsp, +, 26]
 mov     word, ptr, [rdi, +, 26], ax
 movzx   eax, word, ptr, [rsp, +, 24]
 mov     word, ptr, [rdi, +, 24], ax
 movzx   eax, word, ptr, [rsp, +, 22]
 mov     word, ptr, [rdi, +, 22], ax
 movzx   eax, word, ptr, [rsp, +, 20]
 mov     word, ptr, [rdi, +, 20], ax
 movzx   eax, word, ptr, [rsp, +, 18]
 mov     word, ptr, [rdi, +, 18], ax
 movzx   eax, word, ptr, [rsp, +, 16]
 mov     word, ptr, [rdi, +, 16], ax
 movzx   eax, word, ptr, [rsp, +, 14]
 mov     word, ptr, [rdi, +, 14], ax
 movzx   eax, word, ptr, [rsp, +, 12]
 mov     word, ptr, [rdi, +, 12], ax
 movzx   eax, word, ptr, [rsp, +, 10]
 mov     word, ptr, [rdi, +, 10], ax
 movzx   eax, word, ptr, [rsp, +, 8]
 mov     word, ptr, [rdi, +, 8], ax
 movzx   eax, word, ptr, [rsp, +, 6]
 mov     word, ptr, [rdi, +, 6], ax
 movzx   eax, word, ptr, [rsp, +, 4]
 mov     word, ptr, [rdi, +, 4], ax
 movzx   eax, word, ptr, [rsp, +, 2]
 mov     word, ptr, [rdi, +, 2], ax
 movzx   eax, word, ptr, [rsp]
 mov     word, ptr, [rdi], ax
 jmp     .LBB6_2
.LBB6_6:
 cmp     rcx, 2
 mov     r11d, 1
 cmovae  r11, rcx
 lea     rcx, [r11, -, 1]
 mov     r8d, r11d
 and     r8d, 3
 cmp     rcx, 3
 jae     .LBB6_21
 mov     esi, 64
 xor     ecx, ecx
 test    r8, r8
 jne     .LBB6_10
 jmp     .LBB6_13
.LBB6_21:
 mov     rsi, r11
 and     rsi, -4
 xor     ecx, ecx
.LBB6_22:
 movzx   edx, byte, ptr, [rsp, +, rcx]
 mov     byte, ptr, [rdi, +, rcx], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 1]
 mov     byte, ptr, [rdi, +, rcx, +, 1], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 2]
 mov     byte, ptr, [rdi, +, rcx, +, 2], dl
 movzx   edx, byte, ptr, [rsp, +, rcx, +, 3]
 mov     byte, ptr, [rdi, +, rcx, +, 3], dl
 add     rcx, 4
 cmp     rsi, rcx
 jne     .LBB6_22
 mov     esi, 64
 sub     rsi, rcx
 test    r8, r8
 je      .LBB6_13
.LBB6_10:
 lea     r9, [rdi, +, rcx]
 lea     r10, [rsp, +, rcx]
 xor     ecx, ecx
.LBB6_11:
 movzx   edx, byte, ptr, [r10, +, rcx]
 mov     byte, ptr, [r9, +, rcx], dl
 inc     rcx
 cmp     r8, rcx
 jne     .LBB6_11
 sub     rsi, rcx
.LBB6_13:
 cmp     rsi, 8
 jb      .LBB6_14
.LBB6_5:
 mov     rax, qword, ptr, [rsp, +, r11]
 mov     qword, ptr, [rdi, +, r11], rax
 add     rsi, -8
 add     r11, 8
 cmp     rsi, 7
 ja      .LBB6_5
.LBB6_14:
 test    rsi, rsi
 je      .LBB6_2
 lea     r8, [rsi, -, 1]
 mov     rcx, rsi
 mov     rdx, r11
 and     rcx, 3
 je      .LBB6_18
 mov     rdx, r11
.LBB6_17:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 inc     rdx
 dec     rcx
 jne     .LBB6_17
.LBB6_18:
 cmp     r8, 3
 jb      .LBB6_2
 add     rsi, r11
.LBB6_20:
 movzx   eax, byte, ptr, [rsp, +, rdx]
 mov     byte, ptr, [rdi, +, rdx], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 1]
 mov     byte, ptr, [rdi, +, rdx, +, 1], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 2]
 mov     byte, ptr, [rdi, +, rdx, +, 2], al
 movzx   eax, byte, ptr, [rsp, +, rdx, +, 3]
 mov     byte, ptr, [rdi, +, rdx, +, 3], al
 add     rdx, 4
 cmp     rsi, rdx
 jne     .LBB6_20
.LBB6_2:
 add     rsp, 136
 ret
asm_test::atomic_memcpy_store_align2::write_volatile_release_fence:
 sub     rsp, 72
 #MEMBARRIER
 movups  xmm0, xmmword, ptr, [rsi]
 movups  xmm1, xmmword, ptr, [rsi, +, 16]
 movups  xmm2, xmmword, ptr, [rsi, +, 32]
 movups  xmm3, xmmword, ptr, [rsi, +, 48]
 movaps  xmmword, ptr, [rsp, +, 48], xmm3
 movaps  xmmword, ptr, [rsp, +, 32], xmm2
 movaps  xmmword, ptr, [rsp, +, 16], xmm1
 movaps  xmmword, ptr, [rsp], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rdi, +, 48], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 32]
 movups  xmmword, ptr, [rdi, +, 32], xmm0
 movaps  xmm0, xmmword, ptr, [rsp, +, 16]
 movups  xmmword, ptr, [rdi, +, 16], xmm0
 movaps  xmm0, xmmword, ptr, [rsp]
 movups  xmmword, ptr, [rdi], xmm0
 add     rsp, 72
 ret
