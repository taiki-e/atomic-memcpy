asm_test::atomic_memcpy_load_align1::acquire:
 sub     rsp, 64
 mov     rax, rdi
 lea     rdx, [rsi, +, 7]
 and     rdx, -8
 mov     rcx, rdx
 sub     rcx, rsi
 cmp     rcx, 65
 jae     .LBB0_1
 cmp     rdx, rsi
 jne     .LBB0_6
 mov     r11d, 64
 xor     r9d, r9d
 jmp     .LBB0_5
.LBB0_1:
 movzx   ecx, byte, ptr, [rsi]
 mov     byte, ptr, [rsp], cl
 movzx   ecx, byte, ptr, [rsi, +, 1]
 mov     byte, ptr, [rsp, +, 1], cl
 movzx   ecx, byte, ptr, [rsi, +, 2]
 mov     byte, ptr, [rsp, +, 2], cl
 movzx   ecx, byte, ptr, [rsi, +, 3]
 mov     byte, ptr, [rsp, +, 3], cl
 movzx   ecx, byte, ptr, [rsi, +, 4]
 mov     byte, ptr, [rsp, +, 4], cl
 movzx   ecx, byte, ptr, [rsi, +, 5]
 mov     byte, ptr, [rsp, +, 5], cl
 movzx   ecx, byte, ptr, [rsi, +, 6]
 mov     byte, ptr, [rsp, +, 6], cl
 movzx   ecx, byte, ptr, [rsi, +, 7]
 mov     byte, ptr, [rsp, +, 7], cl
 movzx   ecx, byte, ptr, [rsi, +, 8]
 mov     byte, ptr, [rsp, +, 8], cl
 movzx   ecx, byte, ptr, [rsi, +, 9]
 mov     byte, ptr, [rsp, +, 9], cl
 movzx   ecx, byte, ptr, [rsi, +, 10]
 mov     byte, ptr, [rsp, +, 10], cl
 movzx   ecx, byte, ptr, [rsi, +, 11]
 mov     byte, ptr, [rsp, +, 11], cl
 movzx   ecx, byte, ptr, [rsi, +, 12]
 mov     byte, ptr, [rsp, +, 12], cl
 movzx   ecx, byte, ptr, [rsi, +, 13]
 mov     byte, ptr, [rsp, +, 13], cl
 movzx   ecx, byte, ptr, [rsi, +, 14]
 mov     byte, ptr, [rsp, +, 14], cl
 movzx   ecx, byte, ptr, [rsi, +, 15]
 mov     byte, ptr, [rsp, +, 15], cl
 movzx   ecx, byte, ptr, [rsi, +, 16]
 mov     byte, ptr, [rsp, +, 16], cl
 movzx   ecx, byte, ptr, [rsi, +, 17]
 mov     byte, ptr, [rsp, +, 17], cl
 movzx   ecx, byte, ptr, [rsi, +, 18]
 mov     byte, ptr, [rsp, +, 18], cl
 movzx   ecx, byte, ptr, [rsi, +, 19]
 mov     byte, ptr, [rsp, +, 19], cl
 movzx   ecx, byte, ptr, [rsi, +, 20]
 mov     byte, ptr, [rsp, +, 20], cl
 movzx   ecx, byte, ptr, [rsi, +, 21]
 mov     byte, ptr, [rsp, +, 21], cl
 movzx   ecx, byte, ptr, [rsi, +, 22]
 mov     byte, ptr, [rsp, +, 22], cl
 movzx   ecx, byte, ptr, [rsi, +, 23]
 mov     byte, ptr, [rsp, +, 23], cl
 movzx   ecx, byte, ptr, [rsi, +, 24]
 mov     byte, ptr, [rsp, +, 24], cl
 movzx   ecx, byte, ptr, [rsi, +, 25]
 mov     byte, ptr, [rsp, +, 25], cl
 movzx   ecx, byte, ptr, [rsi, +, 26]
 mov     byte, ptr, [rsp, +, 26], cl
 movzx   ecx, byte, ptr, [rsi, +, 27]
 mov     byte, ptr, [rsp, +, 27], cl
 movzx   ecx, byte, ptr, [rsi, +, 28]
 mov     byte, ptr, [rsp, +, 28], cl
 movzx   ecx, byte, ptr, [rsi, +, 29]
 mov     byte, ptr, [rsp, +, 29], cl
 movzx   ecx, byte, ptr, [rsi, +, 30]
 mov     byte, ptr, [rsp, +, 30], cl
 movzx   ecx, byte, ptr, [rsi, +, 31]
 mov     byte, ptr, [rsp, +, 31], cl
 movzx   ecx, byte, ptr, [rsi, +, 32]
 mov     byte, ptr, [rsp, +, 32], cl
 movzx   ecx, byte, ptr, [rsi, +, 33]
 mov     byte, ptr, [rsp, +, 33], cl
 movzx   ecx, byte, ptr, [rsi, +, 34]
 mov     byte, ptr, [rsp, +, 34], cl
 movzx   ecx, byte, ptr, [rsi, +, 35]
 mov     byte, ptr, [rsp, +, 35], cl
 movzx   ecx, byte, ptr, [rsi, +, 36]
 mov     byte, ptr, [rsp, +, 36], cl
 movzx   ecx, byte, ptr, [rsi, +, 37]
 mov     byte, ptr, [rsp, +, 37], cl
 movzx   ecx, byte, ptr, [rsi, +, 38]
 mov     byte, ptr, [rsp, +, 38], cl
 movzx   ecx, byte, ptr, [rsi, +, 39]
 mov     byte, ptr, [rsp, +, 39], cl
 movzx   ecx, byte, ptr, [rsi, +, 40]
 mov     byte, ptr, [rsp, +, 40], cl
 movzx   ecx, byte, ptr, [rsi, +, 41]
 mov     byte, ptr, [rsp, +, 41], cl
 movzx   ecx, byte, ptr, [rsi, +, 42]
 mov     byte, ptr, [rsp, +, 42], cl
 movzx   ecx, byte, ptr, [rsi, +, 43]
 mov     byte, ptr, [rsp, +, 43], cl
 movzx   ecx, byte, ptr, [rsi, +, 44]
 mov     byte, ptr, [rsp, +, 44], cl
 movzx   ecx, byte, ptr, [rsi, +, 45]
 mov     byte, ptr, [rsp, +, 45], cl
 movzx   ecx, byte, ptr, [rsi, +, 46]
 mov     byte, ptr, [rsp, +, 46], cl
 movzx   ecx, byte, ptr, [rsi, +, 47]
 mov     byte, ptr, [rsp, +, 47], cl
 movzx   ecx, byte, ptr, [rsi, +, 48]
 mov     byte, ptr, [rsp, +, 48], cl
 movzx   ecx, byte, ptr, [rsi, +, 49]
 mov     byte, ptr, [rsp, +, 49], cl
 movzx   ecx, byte, ptr, [rsi, +, 50]
 mov     byte, ptr, [rsp, +, 50], cl
 movzx   ecx, byte, ptr, [rsi, +, 51]
 mov     byte, ptr, [rsp, +, 51], cl
 movzx   ecx, byte, ptr, [rsi, +, 52]
 mov     byte, ptr, [rsp, +, 52], cl
 movzx   ecx, byte, ptr, [rsi, +, 53]
 mov     byte, ptr, [rsp, +, 53], cl
 movzx   ecx, byte, ptr, [rsi, +, 54]
 mov     byte, ptr, [rsp, +, 54], cl
 movzx   ecx, byte, ptr, [rsi, +, 55]
 mov     byte, ptr, [rsp, +, 55], cl
 movzx   ecx, byte, ptr, [rsi, +, 56]
 mov     byte, ptr, [rsp, +, 56], cl
 movzx   ecx, byte, ptr, [rsi, +, 57]
 mov     byte, ptr, [rsp, +, 57], cl
 movzx   ecx, byte, ptr, [rsi, +, 58]
 mov     byte, ptr, [rsp, +, 58], cl
 movzx   ecx, byte, ptr, [rsi, +, 59]
 mov     byte, ptr, [rsp, +, 59], cl
 movzx   ecx, byte, ptr, [rsi, +, 60]
 mov     byte, ptr, [rsp, +, 60], cl
 movzx   ecx, byte, ptr, [rsi, +, 61]
 mov     byte, ptr, [rsp, +, 61], cl
 movzx   ecx, byte, ptr, [rsi, +, 62]
 mov     byte, ptr, [rsp, +, 62], cl
 movzx   ecx, byte, ptr, [rsi, +, 63]
 mov     byte, ptr, [rsp, +, 63], cl
 movups  xmm0, xmmword, ptr, [rsp]
 movups  xmm1, xmmword, ptr, [rsp, +, 16]
 movups  xmm2, xmmword, ptr, [rsp, +, 32]
 movups  xmmword, ptr, [rax, +, 32], xmm2
 movups  xmmword, ptr, [rax, +, 16], xmm1
 movups  xmmword, ptr, [rax], xmm0
 mov     rcx, qword, ptr, [rsp, +, 48]
 mov     qword, ptr, [rax, +, 48], rcx
 movzx   ecx, byte, ptr, [rsp, +, 56]
 mov     byte, ptr, [rax, +, 56], cl
 movzx   ecx, byte, ptr, [rsp, +, 57]
 mov     byte, ptr, [rax, +, 57], cl
 movzx   ecx, byte, ptr, [rsp, +, 58]
 mov     byte, ptr, [rax, +, 58], cl
 movzx   ecx, byte, ptr, [rsp, +, 59]
 mov     byte, ptr, [rax, +, 59], cl
 movzx   ecx, byte, ptr, [rsp, +, 60]
 mov     byte, ptr, [rax, +, 60], cl
 movzx   ecx, byte, ptr, [rsp, +, 61]
 mov     byte, ptr, [rax, +, 61], cl
 movzx   ecx, byte, ptr, [rsp, +, 62]
 mov     byte, ptr, [rax, +, 62], cl
 movzx   ecx, byte, ptr, [rsp, +, 63]
 mov     byte, ptr, [rax, +, 63], cl
 #MEMBARRIER
 add     rsp, 64
 ret
.LBB0_6:
 cmp     rcx, 2
 mov     r9d, 1
 cmovae  r9, rcx
 lea     rcx, [r9, -, 1]
 mov     r8d, r9d
 and     r8d, 3
 cmp     rcx, 3
 jae     .LBB0_22
 mov     r11d, 64
 xor     edi, edi
 test    r8, r8
 jne     .LBB0_10
 jmp     .LBB0_13
.LBB0_22:
 mov     rcx, r9
 and     rcx, -4
 xor     edi, edi
.LBB0_23:
 movzx   edx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 1]
 mov     byte, ptr, [rsp, +, rdi, +, 1], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 2]
 mov     byte, ptr, [rsp, +, rdi, +, 2], dl
 movzx   edx, byte, ptr, [rsi, +, rdi, +, 3]
 mov     byte, ptr, [rsp, +, rdi, +, 3], dl
 add     rdi, 4
 cmp     rcx, rdi
 jne     .LBB0_23
 mov     r11d, 64
 sub     r11, rdi
 test    r8, r8
 je      .LBB0_13
.LBB0_10:
 lea     r10, [rsp, +, rdi]
 add     rdi, rsi
 xor     edx, edx
.LBB0_11:
 movzx   ecx, byte, ptr, [rdi, +, rdx]
 mov     byte, ptr, [r10, +, rdx], cl
 inc     rdx
 cmp     r8, rdx
 jne     .LBB0_11
 sub     r11, rdx
.LBB0_13:
 cmp     r11, 8
 jb      .LBB0_14
.LBB0_5:
 mov     rcx, qword, ptr, [rsi, +, r9]
 mov     qword, ptr, [rsp, +, r9], rcx
 add     r11, -8
 add     r9, 8
 cmp     r11, 7
 ja      .LBB0_5
.LBB0_14:
 test    r11, r11
 je      .LBB0_21
 lea     r8, [r11, -, 1]
 mov     rdx, r11
 mov     rdi, r9
 and     rdx, 3
 je      .LBB0_18
 mov     rdi, r9
.LBB0_17:
 movzx   ecx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], cl
 inc     rdi
 dec     rdx
 jne     .LBB0_17
.LBB0_18:
 cmp     r8, 3
 jb      .LBB0_21
 add     r11, r9
.LBB0_20:
 movzx   ecx, byte, ptr, [rsi, +, rdi]
 mov     byte, ptr, [rsp, +, rdi], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 1]
 mov     byte, ptr, [rsp, +, rdi, +, 1], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 2]
 mov     byte, ptr, [rsp, +, rdi, +, 2], cl
 movzx   ecx, byte, ptr, [rsi, +, rdi, +, 3]
 mov     byte, ptr, [rsp, +, rdi, +, 3], cl
 add     rdi, 4
 cmp     r11, rdi
 jne     .LBB0_20
.LBB0_21:
 movups  xmm0, xmmword, ptr, [rsp]
 movups  xmm1, xmmword, ptr, [rsp, +, 16]
 movups  xmm2, xmmword, ptr, [rsp, +, 32]
 movups  xmm3, xmmword, ptr, [rsp, +, 48]
 movups  xmmword, ptr, [rax, +, 48], xmm3
 movups  xmmword, ptr, [rax, +, 32], xmm2
 movups  xmmword, ptr, [rax, +, 16], xmm1
 movups  xmmword, ptr, [rax], xmm0
 #MEMBARRIER
 add     rsp, 64
 ret
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 sub     rsp, 50
 mov     rax, rdi
 movzx   ecx, byte, ptr, [rsi, +, 63]
 mov     byte, ptr, [rsp, +, 49], cl
 movzx   ecx, byte, ptr, [rsi, +, 62]
 mov     byte, ptr, [rsp, +, 48], cl
 movzx   ecx, byte, ptr, [rsi, +, 61]
 mov     byte, ptr, [rsp, +, 47], cl
 movzx   ecx, byte, ptr, [rsi, +, 60]
 mov     byte, ptr, [rsp, +, 46], cl
 movzx   ecx, byte, ptr, [rsi, +, 59]
 mov     byte, ptr, [rsp, +, 45], cl
 movzx   ecx, byte, ptr, [rsi, +, 58]
 mov     byte, ptr, [rsp, +, 44], cl
 movzx   ecx, byte, ptr, [rsi, +, 57]
 mov     byte, ptr, [rsp, +, 43], cl
 movzx   ecx, byte, ptr, [rsi, +, 56]
 mov     byte, ptr, [rsp, +, 42], cl
 movzx   ecx, byte, ptr, [rsi, +, 55]
 mov     byte, ptr, [rsp, +, 41], cl
 movzx   ecx, byte, ptr, [rsi, +, 54]
 mov     byte, ptr, [rsp, +, 40], cl
 movzx   ecx, byte, ptr, [rsi, +, 53]
 mov     byte, ptr, [rsp, +, 39], cl
 movzx   ecx, byte, ptr, [rsi, +, 52]
 mov     byte, ptr, [rsp, +, 38], cl
 movzx   ecx, byte, ptr, [rsi, +, 51]
 mov     byte, ptr, [rsp, +, 37], cl
 movzx   ecx, byte, ptr, [rsi, +, 50]
 mov     byte, ptr, [rsp, +, 36], cl
 movzx   ecx, byte, ptr, [rsi, +, 49]
 mov     byte, ptr, [rsp, +, 35], cl
 movzx   ecx, byte, ptr, [rsi, +, 48]
 mov     byte, ptr, [rsp, +, 34], cl
 movzx   ecx, byte, ptr, [rsi, +, 47]
 mov     byte, ptr, [rsp, +, 33], cl
 movzx   ecx, byte, ptr, [rsi, +, 46]
 mov     byte, ptr, [rsp, +, 32], cl
 movzx   ecx, byte, ptr, [rsi, +, 45]
 mov     byte, ptr, [rsp, +, 31], cl
 movzx   ecx, byte, ptr, [rsi, +, 44]
 mov     byte, ptr, [rsp, +, 30], cl
 movzx   ecx, byte, ptr, [rsi, +, 43]
 mov     byte, ptr, [rsp, +, 29], cl
 movzx   ecx, byte, ptr, [rsi, +, 42]
 mov     byte, ptr, [rsp, +, 28], cl
 movzx   ecx, byte, ptr, [rsi, +, 41]
 mov     byte, ptr, [rsp, +, 27], cl
 movzx   ecx, byte, ptr, [rsi, +, 40]
 mov     byte, ptr, [rsp, +, 26], cl
 movzx   ecx, byte, ptr, [rsi, +, 39]
 mov     byte, ptr, [rsp, +, 25], cl
 movzx   ecx, byte, ptr, [rsi, +, 38]
 mov     byte, ptr, [rsp, +, 24], cl
 movzx   ecx, byte, ptr, [rsi, +, 37]
 mov     byte, ptr, [rsp, +, 23], cl
 movzx   ecx, byte, ptr, [rsi, +, 36]
 mov     byte, ptr, [rsp, +, 22], cl
 movzx   ecx, byte, ptr, [rsi, +, 35]
 mov     byte, ptr, [rsp, +, 21], cl
 movzx   ecx, byte, ptr, [rsi, +, 34]
 mov     byte, ptr, [rsp, +, 20], cl
 movzx   ecx, byte, ptr, [rsi, +, 33]
 mov     byte, ptr, [rsp, +, 19], cl
 movzx   ecx, byte, ptr, [rsi, +, 32]
 mov     byte, ptr, [rsp, +, 18], cl
 movzx   ecx, byte, ptr, [rsi, +, 31]
 mov     byte, ptr, [rsp, +, 17], cl
 movzx   ecx, byte, ptr, [rsi, +, 30]
 mov     byte, ptr, [rsp, +, 16], cl
 movzx   ecx, byte, ptr, [rsi, +, 29]
 mov     byte, ptr, [rsp, +, 15], cl
 movzx   ecx, byte, ptr, [rsi, +, 28]
 mov     byte, ptr, [rsp, +, 14], cl
 movzx   ecx, byte, ptr, [rsi, +, 27]
 mov     byte, ptr, [rsp, +, 13], cl
 movzx   ecx, byte, ptr, [rsi, +, 26]
 mov     byte, ptr, [rsp, +, 12], cl
 movzx   ecx, byte, ptr, [rsi, +, 25]
 mov     byte, ptr, [rsp, +, 11], cl
 movzx   ecx, byte, ptr, [rsi, +, 24]
 mov     byte, ptr, [rsp, +, 10], cl
 movzx   ecx, byte, ptr, [rsi, +, 23]
 mov     byte, ptr, [rsp, +, 9], cl
 movzx   ecx, byte, ptr, [rsi, +, 22]
 mov     byte, ptr, [rsp, +, 8], cl
 movzx   ecx, byte, ptr, [rsi, +, 21]
 mov     byte, ptr, [rsp, +, 7], cl
 movzx   ecx, byte, ptr, [rsi, +, 20]
 mov     byte, ptr, [rsp, +, 6], cl
 movzx   ecx, byte, ptr, [rsi, +, 19]
 mov     byte, ptr, [rsp, +, 5], cl
 movzx   ecx, byte, ptr, [rsi, +, 18]
 mov     byte, ptr, [rsp, +, 4], cl
 movzx   ecx, byte, ptr, [rsi, +, 17]
 mov     byte, ptr, [rsp, +, 3], cl
 movzx   ecx, byte, ptr, [rsi, +, 16]
 mov     byte, ptr, [rsp, +, 2], cl
 movzx   ecx, byte, ptr, [rsi, +, 15]
 mov     byte, ptr, [rsp, +, 1], cl
 movzx   ecx, byte, ptr, [rsi, +, 14]
 mov     byte, ptr, [rsp], cl
 movzx   r13d, byte, ptr, [rsi, +, 13]
 movzx   r12d, byte, ptr, [rsi, +, 12]
 movzx   r15d, byte, ptr, [rsi, +, 11]
 movzx   r14d, byte, ptr, [rsi, +, 10]
 movzx   ebp, byte, ptr, [rsi, +, 9]
 movzx   ebx, byte, ptr, [rsi, +, 8]
 movzx   r11d, byte, ptr, [rsi, +, 7]
 movzx   r10d, byte, ptr, [rsi, +, 6]
 movzx   r9d, byte, ptr, [rsi, +, 5]
 movzx   r8d, byte, ptr, [rsi, +, 4]
 movzx   edi, byte, ptr, [rsi, +, 3]
 movzx   edx, byte, ptr, [rsi, +, 2]
 movzx   ecx, byte, ptr, [rsi]
 movzx   esi, byte, ptr, [rsi, +, 1]
 mov     byte, ptr, [rax], cl
 mov     byte, ptr, [rax, +, 1], sil
 mov     byte, ptr, [rax, +, 2], dl
 mov     byte, ptr, [rax, +, 3], dil
 mov     byte, ptr, [rax, +, 4], r8b
 mov     byte, ptr, [rax, +, 5], r9b
 mov     byte, ptr, [rax, +, 6], r10b
 mov     byte, ptr, [rax, +, 7], r11b
 mov     byte, ptr, [rax, +, 8], bl
 mov     byte, ptr, [rax, +, 9], bpl
 mov     byte, ptr, [rax, +, 10], r14b
 mov     byte, ptr, [rax, +, 11], r15b
 mov     byte, ptr, [rax, +, 12], r12b
 mov     byte, ptr, [rax, +, 13], r13b
 movzx   ecx, byte, ptr, [rsp]
 mov     byte, ptr, [rax, +, 14], cl
 movzx   ecx, byte, ptr, [rsp, +, 1]
 mov     byte, ptr, [rax, +, 15], cl
 movzx   ecx, byte, ptr, [rsp, +, 2]
 mov     byte, ptr, [rax, +, 16], cl
 movzx   ecx, byte, ptr, [rsp, +, 3]
 mov     byte, ptr, [rax, +, 17], cl
 movzx   ecx, byte, ptr, [rsp, +, 4]
 mov     byte, ptr, [rax, +, 18], cl
 movzx   ecx, byte, ptr, [rsp, +, 5]
 mov     byte, ptr, [rax, +, 19], cl
 movzx   ecx, byte, ptr, [rsp, +, 6]
 mov     byte, ptr, [rax, +, 20], cl
 movzx   ecx, byte, ptr, [rsp, +, 7]
 mov     byte, ptr, [rax, +, 21], cl
 movzx   ecx, byte, ptr, [rsp, +, 8]
 mov     byte, ptr, [rax, +, 22], cl
 movzx   ecx, byte, ptr, [rsp, +, 9]
 mov     byte, ptr, [rax, +, 23], cl
 movzx   ecx, byte, ptr, [rsp, +, 10]
 mov     byte, ptr, [rax, +, 24], cl
 movzx   ecx, byte, ptr, [rsp, +, 11]
 mov     byte, ptr, [rax, +, 25], cl
 movzx   ecx, byte, ptr, [rsp, +, 12]
 mov     byte, ptr, [rax, +, 26], cl
 movzx   ecx, byte, ptr, [rsp, +, 13]
 mov     byte, ptr, [rax, +, 27], cl
 movzx   ecx, byte, ptr, [rsp, +, 14]
 mov     byte, ptr, [rax, +, 28], cl
 movzx   ecx, byte, ptr, [rsp, +, 15]
 mov     byte, ptr, [rax, +, 29], cl
 movzx   ecx, byte, ptr, [rsp, +, 16]
 mov     byte, ptr, [rax, +, 30], cl
 movzx   ecx, byte, ptr, [rsp, +, 17]
 mov     byte, ptr, [rax, +, 31], cl
 movzx   ecx, byte, ptr, [rsp, +, 18]
 mov     byte, ptr, [rax, +, 32], cl
 movzx   ecx, byte, ptr, [rsp, +, 19]
 mov     byte, ptr, [rax, +, 33], cl
 movzx   ecx, byte, ptr, [rsp, +, 20]
 mov     byte, ptr, [rax, +, 34], cl
 movzx   ecx, byte, ptr, [rsp, +, 21]
 mov     byte, ptr, [rax, +, 35], cl
 movzx   ecx, byte, ptr, [rsp, +, 22]
 mov     byte, ptr, [rax, +, 36], cl
 movzx   ecx, byte, ptr, [rsp, +, 23]
 mov     byte, ptr, [rax, +, 37], cl
 movzx   ecx, byte, ptr, [rsp, +, 24]
 mov     byte, ptr, [rax, +, 38], cl
 movzx   ecx, byte, ptr, [rsp, +, 25]
 mov     byte, ptr, [rax, +, 39], cl
 movzx   ecx, byte, ptr, [rsp, +, 26]
 mov     byte, ptr, [rax, +, 40], cl
 movzx   ecx, byte, ptr, [rsp, +, 27]
 mov     byte, ptr, [rax, +, 41], cl
 movzx   ecx, byte, ptr, [rsp, +, 28]
 mov     byte, ptr, [rax, +, 42], cl
 movzx   ecx, byte, ptr, [rsp, +, 29]
 mov     byte, ptr, [rax, +, 43], cl
 movzx   ecx, byte, ptr, [rsp, +, 30]
 mov     byte, ptr, [rax, +, 44], cl
 movzx   ecx, byte, ptr, [rsp, +, 31]
 mov     byte, ptr, [rax, +, 45], cl
 movzx   ecx, byte, ptr, [rsp, +, 32]
 mov     byte, ptr, [rax, +, 46], cl
 movzx   ecx, byte, ptr, [rsp, +, 33]
 mov     byte, ptr, [rax, +, 47], cl
 movzx   ecx, byte, ptr, [rsp, +, 34]
 mov     byte, ptr, [rax, +, 48], cl
 movzx   ecx, byte, ptr, [rsp, +, 35]
 mov     byte, ptr, [rax, +, 49], cl
 movzx   ecx, byte, ptr, [rsp, +, 36]
 mov     byte, ptr, [rax, +, 50], cl
 movzx   ecx, byte, ptr, [rsp, +, 37]
 mov     byte, ptr, [rax, +, 51], cl
 movzx   ecx, byte, ptr, [rsp, +, 38]
 mov     byte, ptr, [rax, +, 52], cl
 movzx   ecx, byte, ptr, [rsp, +, 39]
 mov     byte, ptr, [rax, +, 53], cl
 movzx   ecx, byte, ptr, [rsp, +, 40]
 mov     byte, ptr, [rax, +, 54], cl
 movzx   ecx, byte, ptr, [rsp, +, 41]
 mov     byte, ptr, [rax, +, 55], cl
 movzx   ecx, byte, ptr, [rsp, +, 42]
 mov     byte, ptr, [rax, +, 56], cl
 movzx   ecx, byte, ptr, [rsp, +, 43]
 mov     byte, ptr, [rax, +, 57], cl
 movzx   ecx, byte, ptr, [rsp, +, 44]
 mov     byte, ptr, [rax, +, 58], cl
 movzx   ecx, byte, ptr, [rsp, +, 45]
 mov     byte, ptr, [rax, +, 59], cl
 movzx   ecx, byte, ptr, [rsp, +, 46]
 mov     byte, ptr, [rax, +, 60], cl
 movzx   ecx, byte, ptr, [rsp, +, 47]
 mov     byte, ptr, [rax, +, 61], cl
 movzx   ecx, byte, ptr, [rsp, +, 48]
 mov     byte, ptr, [rax, +, 62], cl
 movzx   ecx, byte, ptr, [rsp, +, 49]
 mov     byte, ptr, [rax, +, 63], cl
 #MEMBARRIER
 add     rsp, 50
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
