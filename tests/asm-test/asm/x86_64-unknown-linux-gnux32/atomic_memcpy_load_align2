asm_test::atomic_memcpy_load_align2::acquire:
 sub     esp, 32
 mov     rax, rdi
 lea     ecx, [rsi, +, 30]
 lea     edx, [rsp, +, 30]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 28]
 lea     edx, [rsp, +, 28]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 26]
 lea     edx, [rsp, +, 26]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 24]
 lea     edx, [rsp, +, 24]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 22]
 lea     edx, [rsp, +, 22]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 20]
 lea     edx, [rsp, +, 20]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 18]
 lea     edx, [rsp, +, 18]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 16]
 lea     edx, [rsp, +, 16]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 14]
 lea     edx, [rsp, +, 14]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 12]
 lea     edx, [rsp, +, 12]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 10]
 lea     edx, [rsp, +, 10]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 8]
 lea     edx, [rsp, +, 8]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 6]
 lea     edx, [rsp, +, 6]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 4]
 lea     edx, [rsp, +, 4]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 lea     ecx, [rsi, +, 2]
 lea     edx, [rsp, +, 2]
 #APP
 mov     cx, word, ptr, [ecx]
 mov     word, ptr, [edx], cx
 #NO_APP
 mov     ecx, esp
 #APP
 mov     dx, word, ptr, [esi]
 mov     word, ptr, [ecx], dx
 #NO_APP
 movups  xmm0, xmmword, ptr, [esp]
 movups  xmm1, xmmword, ptr, [esp, +, 16]
 movups  xmmword, ptr, [eax], xmm0
 movups  xmmword, ptr, [eax, +, 16], xmm1
 #MEMBARRIER
 add     esp, 32
 ret
asm_test::atomic_memcpy_load_align2::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 sub     esp, 4
 mov     rax, rdi
 movzx   ecx, word, ptr, [esi, +, 30]
 mov     word, ptr, [esp, +, 2], cx
 movzx   ecx, word, ptr, [esi, +, 28]
 mov     word, ptr, [esp], cx
 movzx   r10d, word, ptr, [esi, +, 26]
 movzx   r11d, word, ptr, [esi, +, 24]
 movzx   r14d, word, ptr, [esi, +, 22]
 movzx   r15d, word, ptr, [esi, +, 20]
 movzx   r12d, word, ptr, [esi, +, 18]
 movzx   r13d, word, ptr, [esi, +, 16]
 movzx   ebp, word, ptr, [esi, +, 14]
 movzx   r9d, word, ptr, [esi, +, 12]
 movzx   r8d, word, ptr, [esi, +, 10]
 movzx   edi, word, ptr, [esi, +, 8]
 movzx   ebx, word, ptr, [esi, +, 6]
 movzx   edx, word, ptr, [esi, +, 4]
 movzx   ecx, word, ptr, [esi]
 movzx   esi, word, ptr, [esi, +, 2]
 mov     word, ptr, [eax], cx
 mov     word, ptr, [eax, +, 2], si
 mov     word, ptr, [eax, +, 4], dx
 mov     word, ptr, [eax, +, 6], bx
 mov     word, ptr, [eax, +, 8], di
 mov     word, ptr, [eax, +, 10], r8w
 mov     word, ptr, [eax, +, 12], r9w
 mov     word, ptr, [eax, +, 14], bp
 mov     word, ptr, [eax, +, 16], r13w
 mov     word, ptr, [eax, +, 18], r12w
 mov     word, ptr, [eax, +, 20], r15w
 mov     word, ptr, [eax, +, 22], r14w
 mov     word, ptr, [eax, +, 24], r11w
 mov     word, ptr, [eax, +, 26], r10w
 movzx   ecx, word, ptr, [esp]
 mov     word, ptr, [eax, +, 28], cx
 movzx   ecx, word, ptr, [esp, +, 2]
 mov     word, ptr, [eax, +, 30], cx
 #MEMBARRIER
 add     esp, 4
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
