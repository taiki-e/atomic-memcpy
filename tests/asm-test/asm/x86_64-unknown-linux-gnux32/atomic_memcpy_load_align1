asm_test::atomic_memcpy_load_align1::acquire:
 sub     esp, 32
 mov     rax, rdi
 lea     edx, [rsi, +, 3]
 and     edx, -4
 mov     ecx, edx
 sub     ecx, esi
 cmp     ecx, 33
 jae     .LBB0_1
 cmp     edx, esi
 jne     .LBB0_5
 mov     r10d, 32
 xor     r9d, r9d
 jmp     .LBB0_4
.LBB0_1:
 movzx   ecx, byte, ptr, [esi]
 mov     byte, ptr, [esp], cl
 movzx   ecx, byte, ptr, [esi, +, 1]
 mov     byte, ptr, [esp, +, 1], cl
 movzx   ecx, byte, ptr, [esi, +, 2]
 mov     byte, ptr, [esp, +, 2], cl
 movzx   ecx, byte, ptr, [esi, +, 3]
 mov     byte, ptr, [esp, +, 3], cl
 movzx   ecx, byte, ptr, [esi, +, 4]
 mov     byte, ptr, [esp, +, 4], cl
 movzx   ecx, byte, ptr, [esi, +, 5]
 mov     byte, ptr, [esp, +, 5], cl
 movzx   ecx, byte, ptr, [esi, +, 6]
 mov     byte, ptr, [esp, +, 6], cl
 movzx   ecx, byte, ptr, [esi, +, 7]
 mov     byte, ptr, [esp, +, 7], cl
 movzx   ecx, byte, ptr, [esi, +, 8]
 mov     byte, ptr, [esp, +, 8], cl
 movzx   ecx, byte, ptr, [esi, +, 9]
 mov     byte, ptr, [esp, +, 9], cl
 movzx   ecx, byte, ptr, [esi, +, 10]
 mov     byte, ptr, [esp, +, 10], cl
 movzx   ecx, byte, ptr, [esi, +, 11]
 mov     byte, ptr, [esp, +, 11], cl
 movzx   ecx, byte, ptr, [esi, +, 12]
 mov     byte, ptr, [esp, +, 12], cl
 movzx   ecx, byte, ptr, [esi, +, 13]
 mov     byte, ptr, [esp, +, 13], cl
 movzx   ecx, byte, ptr, [esi, +, 14]
 mov     byte, ptr, [esp, +, 14], cl
 movzx   ecx, byte, ptr, [esi, +, 15]
 mov     byte, ptr, [esp, +, 15], cl
 movzx   ecx, byte, ptr, [esi, +, 16]
 mov     byte, ptr, [esp, +, 16], cl
 movzx   ecx, byte, ptr, [esi, +, 17]
 mov     byte, ptr, [esp, +, 17], cl
 movzx   ecx, byte, ptr, [esi, +, 18]
 mov     byte, ptr, [esp, +, 18], cl
 movzx   ecx, byte, ptr, [esi, +, 19]
 mov     byte, ptr, [esp, +, 19], cl
 movzx   ecx, byte, ptr, [esi, +, 20]
 mov     byte, ptr, [esp, +, 20], cl
 movzx   ecx, byte, ptr, [esi, +, 21]
 mov     byte, ptr, [esp, +, 21], cl
 movzx   ecx, byte, ptr, [esi, +, 22]
 mov     byte, ptr, [esp, +, 22], cl
 movzx   ecx, byte, ptr, [esi, +, 23]
 mov     byte, ptr, [esp, +, 23], cl
 movzx   ecx, byte, ptr, [esi, +, 24]
 mov     byte, ptr, [esp, +, 24], cl
 movzx   ecx, byte, ptr, [esi, +, 25]
 mov     byte, ptr, [esp, +, 25], cl
 movzx   ecx, byte, ptr, [esi, +, 26]
 mov     byte, ptr, [esp, +, 26], cl
 movzx   ecx, byte, ptr, [esi, +, 27]
 mov     byte, ptr, [esp, +, 27], cl
 movzx   ecx, byte, ptr, [esi, +, 28]
 mov     byte, ptr, [esp, +, 28], cl
 movzx   ecx, byte, ptr, [esi, +, 29]
 mov     byte, ptr, [esp, +, 29], cl
 movzx   ecx, byte, ptr, [esi, +, 30]
 mov     byte, ptr, [esp, +, 30], cl
 movzx   ecx, byte, ptr, [esi, +, 31]
 mov     byte, ptr, [esp, +, 31], cl
 movups  xmm0, xmmword, ptr, [esp]
 movups  xmmword, ptr, [eax], xmm0
 mov     ecx, dword, ptr, [esp, +, 16]
 mov     dword, ptr, [eax, +, 16], ecx
 movzx   ecx, word, ptr, [esp, +, 20]
 mov     word, ptr, [eax, +, 20], cx
 movzx   ecx, byte, ptr, [esp, +, 22]
 mov     byte, ptr, [eax, +, 22], cl
 movzx   ecx, byte, ptr, [esp, +, 23]
 mov     byte, ptr, [eax, +, 23], cl
 movzx   ecx, byte, ptr, [esp, +, 24]
 mov     byte, ptr, [eax, +, 24], cl
 movzx   ecx, byte, ptr, [esp, +, 25]
 mov     byte, ptr, [eax, +, 25], cl
 movzx   ecx, byte, ptr, [esp, +, 26]
 mov     byte, ptr, [eax, +, 26], cl
 movzx   ecx, byte, ptr, [esp, +, 27]
 mov     byte, ptr, [eax, +, 27], cl
 movzx   ecx, byte, ptr, [esp, +, 28]
 mov     byte, ptr, [eax, +, 28], cl
 movzx   ecx, byte, ptr, [esp, +, 29]
 mov     byte, ptr, [eax, +, 29], cl
 movzx   ecx, byte, ptr, [esp, +, 30]
 mov     byte, ptr, [eax, +, 30], cl
 movzx   ecx, byte, ptr, [esp, +, 31]
 mov     byte, ptr, [eax, +, 31], cl
 #MEMBARRIER
 add     esp, 32
 ret
.LBB0_5:
 cmp     ecx, 2
 mov     r9d, 1
 cmovae  r9d, ecx
 lea     ecx, [r9, -, 1]
 mov     r8d, r9d
 and     r8d, 3
 xor     edi, edi
 cmp     ecx, 3
 jb      .LBB0_8
 mov     r10d, r9d
 and     r10d, -4
 xor     ecx, ecx
.LBB0_7:
 movzx   edx, byte, ptr, [esi, +, ecx]
 mov     byte, ptr, [esp, +, ecx], dl
 movzx   edx, byte, ptr, [esi, +, ecx, +, 1]
 mov     byte, ptr, [esp, +, ecx, +, 1], dl
 movzx   edx, byte, ptr, [esi, +, ecx, +, 2]
 mov     byte, ptr, [esp, +, ecx, +, 2], dl
 lea     edi, [rcx, +, 4]
 movzx   edx, byte, ptr, [esi, +, ecx, +, 3]
 mov     byte, ptr, [esp, +, ecx, +, 3], dl
 mov     ecx, edi
 cmp     r10d, edi
 jne     .LBB0_7
.LBB0_8:
 test    r8d, r8d
 je      .LBB0_11
 lea     r10d, [rsp, +, rdi]
 add     edi, esi
 xor     edx, edx
.LBB0_10:
 movzx   ecx, byte, ptr, [edi, +, edx]
 mov     byte, ptr, [r10d, +, edx], cl
 inc     edx
 cmp     r8d, edx
 jne     .LBB0_10
.LBB0_11:
 mov     r10d, 32
 sub     r10d, r9d
 cmp     r10d, 4
 jb      .LBB0_12
.LBB0_4:
 mov     ecx, dword, ptr, [esi, +, r9d]
 mov     dword, ptr, [esp, +, r9d], ecx
 add     r10d, -4
 add     r9d, 4
 cmp     r10d, 3
 ja      .LBB0_4
.LBB0_12:
 test    r10d, r10d
 je      .LBB0_19
 lea     r8d, [r10, -, 1]
 mov     ecx, r10d
 mov     edi, r9d
 and     ecx, 3
 je      .LBB0_16
 mov     edi, r9d
.LBB0_15:
 movzx   edx, byte, ptr, [esi, +, edi]
 mov     byte, ptr, [esp, +, edi], dl
 inc     edi
 dec     ecx
 jne     .LBB0_15
.LBB0_16:
 cmp     r8d, 3
 jb      .LBB0_19
 add     r10d, r9d
.LBB0_18:
 movzx   ecx, byte, ptr, [esi, +, edi]
 mov     byte, ptr, [esp, +, edi], cl
 movzx   ecx, byte, ptr, [esi, +, edi, +, 1]
 mov     byte, ptr, [esp, +, edi, +, 1], cl
 movzx   ecx, byte, ptr, [esi, +, edi, +, 2]
 mov     byte, ptr, [esp, +, edi, +, 2], cl
 movzx   ecx, byte, ptr, [esi, +, edi, +, 3]
 mov     byte, ptr, [esp, +, edi, +, 3], cl
 add     edi, 4
 cmp     r10d, edi
 jne     .LBB0_18
.LBB0_19:
 movups  xmm0, xmmword, ptr, [esp]
 movups  xmm1, xmmword, ptr, [esp, +, 16]
 movups  xmmword, ptr, [eax, +, 16], xmm1
 movups  xmmword, ptr, [eax], xmm0
 #MEMBARRIER
 add     esp, 32
 ret
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 sub     esp, 18
 mov     rax, rdi
 movzx   ecx, byte, ptr, [esi, +, 31]
 mov     byte, ptr, [esp, +, 17], cl
 movzx   ecx, byte, ptr, [esi, +, 30]
 mov     byte, ptr, [esp, +, 16], cl
 movzx   ecx, byte, ptr, [esi, +, 29]
 mov     byte, ptr, [esp, +, 15], cl
 movzx   ecx, byte, ptr, [esi, +, 28]
 mov     byte, ptr, [esp, +, 14], cl
 movzx   ecx, byte, ptr, [esi, +, 27]
 mov     byte, ptr, [esp, +, 13], cl
 movzx   ecx, byte, ptr, [esi, +, 26]
 mov     byte, ptr, [esp, +, 12], cl
 movzx   ecx, byte, ptr, [esi, +, 25]
 mov     byte, ptr, [esp, +, 11], cl
 movzx   ecx, byte, ptr, [esi, +, 24]
 mov     byte, ptr, [esp, +, 10], cl
 movzx   ecx, byte, ptr, [esi, +, 23]
 mov     byte, ptr, [esp, +, 9], cl
 movzx   ecx, byte, ptr, [esi, +, 22]
 mov     byte, ptr, [esp, +, 8], cl
 movzx   ecx, byte, ptr, [esi, +, 21]
 mov     byte, ptr, [esp, +, 7], cl
 movzx   ecx, byte, ptr, [esi, +, 20]
 mov     byte, ptr, [esp, +, 6], cl
 movzx   ecx, byte, ptr, [esi, +, 19]
 mov     byte, ptr, [esp, +, 5], cl
 movzx   ecx, byte, ptr, [esi, +, 18]
 mov     byte, ptr, [esp, +, 4], cl
 movzx   ecx, byte, ptr, [esi, +, 17]
 mov     byte, ptr, [esp, +, 3], cl
 movzx   ecx, byte, ptr, [esi, +, 16]
 mov     byte, ptr, [esp, +, 2], cl
 movzx   ecx, byte, ptr, [esi, +, 15]
 mov     byte, ptr, [esp, +, 1], cl
 movzx   ecx, byte, ptr, [esi, +, 14]
 mov     byte, ptr, [esp], cl
 movzx   r13d, byte, ptr, [esi, +, 13]
 movzx   r12d, byte, ptr, [esi, +, 12]
 movzx   r15d, byte, ptr, [esi, +, 11]
 movzx   r14d, byte, ptr, [esi, +, 10]
 movzx   ebp, byte, ptr, [esi, +, 9]
 movzx   ebx, byte, ptr, [esi, +, 8]
 movzx   r11d, byte, ptr, [esi, +, 7]
 movzx   r10d, byte, ptr, [esi, +, 6]
 movzx   r9d, byte, ptr, [esi, +, 5]
 movzx   r8d, byte, ptr, [esi, +, 4]
 movzx   edi, byte, ptr, [esi, +, 3]
 movzx   edx, byte, ptr, [esi, +, 2]
 movzx   ecx, byte, ptr, [esi]
 movzx   esi, byte, ptr, [esi, +, 1]
 mov     byte, ptr, [eax], cl
 mov     byte, ptr, [eax, +, 1], sil
 mov     byte, ptr, [eax, +, 2], dl
 mov     byte, ptr, [eax, +, 3], dil
 mov     byte, ptr, [eax, +, 4], r8b
 mov     byte, ptr, [eax, +, 5], r9b
 mov     byte, ptr, [eax, +, 6], r10b
 mov     byte, ptr, [eax, +, 7], r11b
 mov     byte, ptr, [eax, +, 8], bl
 mov     byte, ptr, [eax, +, 9], bpl
 mov     byte, ptr, [eax, +, 10], r14b
 mov     byte, ptr, [eax, +, 11], r15b
 mov     byte, ptr, [eax, +, 12], r12b
 mov     byte, ptr, [eax, +, 13], r13b
 movzx   ecx, byte, ptr, [esp]
 mov     byte, ptr, [eax, +, 14], cl
 movzx   ecx, byte, ptr, [esp, +, 1]
 mov     byte, ptr, [eax, +, 15], cl
 movzx   ecx, byte, ptr, [esp, +, 2]
 mov     byte, ptr, [eax, +, 16], cl
 movzx   ecx, byte, ptr, [esp, +, 3]
 mov     byte, ptr, [eax, +, 17], cl
 movzx   ecx, byte, ptr, [esp, +, 4]
 mov     byte, ptr, [eax, +, 18], cl
 movzx   ecx, byte, ptr, [esp, +, 5]
 mov     byte, ptr, [eax, +, 19], cl
 movzx   ecx, byte, ptr, [esp, +, 6]
 mov     byte, ptr, [eax, +, 20], cl
 movzx   ecx, byte, ptr, [esp, +, 7]
 mov     byte, ptr, [eax, +, 21], cl
 movzx   ecx, byte, ptr, [esp, +, 8]
 mov     byte, ptr, [eax, +, 22], cl
 movzx   ecx, byte, ptr, [esp, +, 9]
 mov     byte, ptr, [eax, +, 23], cl
 movzx   ecx, byte, ptr, [esp, +, 10]
 mov     byte, ptr, [eax, +, 24], cl
 movzx   ecx, byte, ptr, [esp, +, 11]
 mov     byte, ptr, [eax, +, 25], cl
 movzx   ecx, byte, ptr, [esp, +, 12]
 mov     byte, ptr, [eax, +, 26], cl
 movzx   ecx, byte, ptr, [esp, +, 13]
 mov     byte, ptr, [eax, +, 27], cl
 movzx   ecx, byte, ptr, [esp, +, 14]
 mov     byte, ptr, [eax, +, 28], cl
 movzx   ecx, byte, ptr, [esp, +, 15]
 mov     byte, ptr, [eax, +, 29], cl
 movzx   ecx, byte, ptr, [esp, +, 16]
 mov     byte, ptr, [eax, +, 30], cl
 movzx   ecx, byte, ptr, [esp, +, 17]
 mov     byte, ptr, [eax, +, 31], cl
 #MEMBARRIER
 add     esp, 18
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
