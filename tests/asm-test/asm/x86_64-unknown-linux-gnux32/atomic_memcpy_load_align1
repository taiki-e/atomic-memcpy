asm_test::atomic_memcpy_load_align1::acquire:
 sub     esp, 32
 mov     rax, rdi
 lea     ecx, [rsi, +, 31]
 lea     edx, [rsp, +, 31]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 30]
 lea     edx, [rsp, +, 30]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 29]
 lea     edx, [rsp, +, 29]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 28]
 lea     edx, [rsp, +, 28]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 27]
 lea     edx, [rsp, +, 27]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 26]
 lea     edx, [rsp, +, 26]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 25]
 lea     edx, [rsp, +, 25]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 24]
 lea     edx, [rsp, +, 24]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 23]
 lea     edx, [rsp, +, 23]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 22]
 lea     edx, [rsp, +, 22]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 21]
 lea     edx, [rsp, +, 21]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 20]
 lea     edx, [rsp, +, 20]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 19]
 lea     edx, [rsp, +, 19]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 18]
 lea     edx, [rsp, +, 18]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 17]
 lea     edx, [rsp, +, 17]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 16]
 lea     edx, [rsp, +, 16]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 15]
 lea     edx, [rsp, +, 15]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 14]
 lea     edx, [rsp, +, 14]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 13]
 lea     edx, [rsp, +, 13]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 12]
 lea     edx, [rsp, +, 12]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 11]
 lea     edx, [rsp, +, 11]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 10]
 lea     edx, [rsp, +, 10]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 9]
 lea     edx, [rsp, +, 9]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 8]
 lea     edx, [rsp, +, 8]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 7]
 lea     edx, [rsp, +, 7]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 6]
 lea     edx, [rsp, +, 6]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 5]
 lea     edx, [rsp, +, 5]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 4]
 lea     edx, [rsp, +, 4]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 3]
 lea     edx, [rsp, +, 3]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 2]
 lea     edx, [rsp, +, 2]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 lea     ecx, [rsi, +, 1]
 lea     edx, [rsp, +, 1]
 #APP
 mov     cl, byte, ptr, [ecx]
 mov     byte, ptr, [edx], cl
 #NO_APP
 mov     ecx, esp
 #APP
 mov     dl, byte, ptr, [esi]
 mov     byte, ptr, [ecx], dl
 #NO_APP
 movups  xmm0, xmmword, ptr, [esp]
 movups  xmm1, xmmword, ptr, [esp, +, 16]
 movups  xmmword, ptr, [eax], xmm0
 movups  xmmword, ptr, [eax, +, 16], xmm1
 #MEMBARRIER
 add     esp, 32
 ret
asm_test::atomic_memcpy_load_align1::read_volatile_acquire_fence:
 push    rbp
 push    r15
 push    r14
 push    r13
 push    r12
 push    rbx
 sub     esp, 18
 mov     rax, rdi
 mov     cl, byte, ptr, [esi, +, 31]
 mov     byte, ptr, [esp, +, 17], cl
 mov     cl, byte, ptr, [esi, +, 30]
 mov     byte, ptr, [esp, +, 16], cl
 mov     cl, byte, ptr, [esi, +, 29]
 mov     byte, ptr, [esp, +, 15], cl
 mov     cl, byte, ptr, [esi, +, 28]
 mov     byte, ptr, [esp, +, 14], cl
 mov     cl, byte, ptr, [esi, +, 27]
 mov     byte, ptr, [esp, +, 13], cl
 mov     cl, byte, ptr, [esi, +, 26]
 mov     byte, ptr, [esp, +, 12], cl
 mov     cl, byte, ptr, [esi, +, 25]
 mov     byte, ptr, [esp, +, 11], cl
 mov     cl, byte, ptr, [esi, +, 24]
 mov     byte, ptr, [esp, +, 10], cl
 mov     cl, byte, ptr, [esi, +, 23]
 mov     byte, ptr, [esp, +, 9], cl
 mov     cl, byte, ptr, [esi, +, 22]
 mov     byte, ptr, [esp, +, 8], cl
 mov     cl, byte, ptr, [esi, +, 21]
 mov     byte, ptr, [esp, +, 7], cl
 mov     cl, byte, ptr, [esi, +, 20]
 mov     byte, ptr, [esp, +, 6], cl
 mov     cl, byte, ptr, [esi, +, 19]
 mov     byte, ptr, [esp, +, 5], cl
 mov     cl, byte, ptr, [esi, +, 18]
 mov     byte, ptr, [esp, +, 4], cl
 mov     cl, byte, ptr, [esi, +, 17]
 mov     byte, ptr, [esp, +, 3], cl
 mov     cl, byte, ptr, [esi, +, 16]
 mov     byte, ptr, [esp, +, 2], cl
 mov     cl, byte, ptr, [esi, +, 15]
 mov     byte, ptr, [esp, +, 1], cl
 mov     cl, byte, ptr, [esi, +, 14]
 mov     byte, ptr, [esp], cl
 mov     r13b, byte, ptr, [esi, +, 13]
 mov     r12b, byte, ptr, [esi, +, 12]
 mov     r15b, byte, ptr, [esi, +, 11]
 mov     r14b, byte, ptr, [esi, +, 10]
 mov     bpl, byte, ptr, [esi, +, 9]
 mov     bl, byte, ptr, [esi, +, 8]
 mov     r11b, byte, ptr, [esi, +, 7]
 mov     r10b, byte, ptr, [esi, +, 6]
 mov     r9b, byte, ptr, [esi, +, 5]
 mov     r8b, byte, ptr, [esi, +, 4]
 mov     dil, byte, ptr, [esi, +, 3]
 mov     dl, byte, ptr, [esi, +, 2]
 mov     cl, byte, ptr, [esi]
 mov     sil, byte, ptr, [esi, +, 1]
 mov     byte, ptr, [eax], cl
 mov     byte, ptr, [eax, +, 1], sil
 mov     byte, ptr, [eax, +, 2], dl
 mov     byte, ptr, [eax, +, 3], dil
 mov     byte, ptr, [eax, +, 4], r8b
 mov     byte, ptr, [eax, +, 5], r9b
 mov     byte, ptr, [eax, +, 6], r10b
 mov     byte, ptr, [eax, +, 7], r11b
 mov     byte, ptr, [eax, +, 8], bl
 mov     byte, ptr, [eax, +, 9], bpl
 mov     byte, ptr, [eax, +, 10], r14b
 mov     byte, ptr, [eax, +, 11], r15b
 mov     byte, ptr, [eax, +, 12], r12b
 mov     byte, ptr, [eax, +, 13], r13b
 mov     cl, byte, ptr, [esp]
 mov     byte, ptr, [eax, +, 14], cl
 mov     cl, byte, ptr, [esp, +, 1]
 mov     byte, ptr, [eax, +, 15], cl
 mov     cl, byte, ptr, [esp, +, 2]
 mov     byte, ptr, [eax, +, 16], cl
 mov     cl, byte, ptr, [esp, +, 3]
 mov     byte, ptr, [eax, +, 17], cl
 mov     cl, byte, ptr, [esp, +, 4]
 mov     byte, ptr, [eax, +, 18], cl
 mov     cl, byte, ptr, [esp, +, 5]
 mov     byte, ptr, [eax, +, 19], cl
 mov     cl, byte, ptr, [esp, +, 6]
 mov     byte, ptr, [eax, +, 20], cl
 mov     cl, byte, ptr, [esp, +, 7]
 mov     byte, ptr, [eax, +, 21], cl
 mov     cl, byte, ptr, [esp, +, 8]
 mov     byte, ptr, [eax, +, 22], cl
 mov     cl, byte, ptr, [esp, +, 9]
 mov     byte, ptr, [eax, +, 23], cl
 mov     cl, byte, ptr, [esp, +, 10]
 mov     byte, ptr, [eax, +, 24], cl
 mov     cl, byte, ptr, [esp, +, 11]
 mov     byte, ptr, [eax, +, 25], cl
 mov     cl, byte, ptr, [esp, +, 12]
 mov     byte, ptr, [eax, +, 26], cl
 mov     cl, byte, ptr, [esp, +, 13]
 mov     byte, ptr, [eax, +, 27], cl
 mov     cl, byte, ptr, [esp, +, 14]
 mov     byte, ptr, [eax, +, 28], cl
 mov     cl, byte, ptr, [esp, +, 15]
 mov     byte, ptr, [eax, +, 29], cl
 mov     cl, byte, ptr, [esp, +, 16]
 mov     byte, ptr, [eax, +, 30], cl
 mov     cl, byte, ptr, [esp, +, 17]
 mov     byte, ptr, [eax, +, 31], cl
 #MEMBARRIER
 add     esp, 18
 pop     rbx
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 pop     rbp
 ret
